<script type="text/javascript">
    const Console = (function () {
        
        return {
            error: function () {
            
            },
            log: function () {
                let title, type, vals
                
                if (DEBUGMODE) {
                    if (arguments.length > 0) {
                        if (arguments.length === 1) {
                            title = "Log Object"
                            vals = arguments[0]
                        }
                        
                        if (arguments.length === 2) {
                            
                            if (typeof arguments[0] === "string") {
                                title = arguments[0]
                            } else {
                                title = "Log Object"
                                vals = arguments[0]
                            }
                            
                            if (typeof arguments[1] === "object") {
                                type = " [object] "
                                vals = arguments[1]
                            } else if (typeof arguments[1] === "boolean") {
                                type = " [boolean] "
                                vals = arguments[1]
                            } else if (typeof arguments[1] === "number") {
                                type = " [number] "
                                vals = arguments[1]
                            } else if (typeof arguments[1] === "bigint") {
                                type = " [bigint] "
                                vals = arguments[1]
                            } else if (typeof arguments[1] === "string") {
                                type = " [string] "
                                vals = arguments[1]
                            } else if (typeof arguments[1] === "symbol") {
                                type = " [symbol] "
                                vals = arguments[1]
                            } else if (typeof arguments[1] === "function") {
                                type = " [function] "
                                vals = arguments[1]
                            } else {
                                type = " [other] "
                                vals = arguments[1]
                            }
                            
                            console.log(title + type, vals)
                        }
                    }
                }
            },
        }
    })()
    
    $(function () {
        Logger.init()
    })
    
    $(function () {
        $(".debug_demo")
          .on("click", function () {
              let showElements = true
              if (!$(this).attr("data-shown")) {
                  $(this).attr("data-shown", "true")
                  showElements = true
              }
              
              if ($(this).attr("data-shown") === "false") {
                  $(this).attr("data-shown", "true")
                  showElements = true
              } else {
                  showElements = false
                  $(this).attr("data-shown", "false")
              }
              
              let els = document.getElementsByClassName("dev-element")
              
              for (var i = 0; i < els.length; i++) {
                  var element = els[i]
                  let tagName = element.tagName
                  
                  if (tagName === "input") {
                      
                      if (showElements === false) {
                          element.hidden = false
                          element.type = "text"
                      } else {
                          element.type = "hidden"
                          element.hidden = true
                      }
                  } else if (tagName === "label") {
                      if (showElements === false) {
                          $(element).removeClass("d-none")
                      } else {
                          $(element).addClass("d-none")
                      }
                  }
              }
          })
    })
    
    $(function () {
        $("#image_gallery").load("/public/mdb-addons/mdb-lightbox-ui.html")
    })
    
    $(function () {
        
        /*
        $("#product_index_table").Tabledit({
            url: "/api/v1.0/products/table_update",
            buttons: {
                edit: {
                    class: "btn btn-sm btn-icon btn-flat btn-default",
                    html: "<i class=\"fas fa-edit\"></i>",
                    action: "edit",
                },
                delete: {
                    class: "btn btn-sm btn-icon btn-flat btn-default",
                    html: "<i class=\"fas fa-trash-alt\"></i>",
                    action: "delete",
                },
                navigate: {
                    class: "btn btn-sm btn-icon btn-flat btn-default",
                    html: "<i class='fas fa-external-link-alt'></i>",
                    action: "navigate",
                },
                save: {
                    class: "btn btn-sm btn-success",
                    html: "Save",
                },
                restore: {
                    class: "btn btn-sm btn-warning",
                    html: "Restore",
                    action: "restore",
                },
                confirm: {
                    class: "btn btn-sm btn-danger",
                    html: "Are you sure?",
                },
            },
            onDraw: function () {

            },
            onSuccess: function (data, textStatus, jqXHR) {
                console.log("success", data)
            },
            onFail: function (jqXHR, textStatus, errorThrown) {
                console.log("err", data)
            },
            onAlways: function () {},
            onAjax: function (action, serialize) {},
            columns: {
                identifier: [0, "id"],
                editable: [
                    [1, "name"],
                    [2, "sku"],
                    [5, "location"],
                    [6, "category_id", "{\"1\":\"Hotels\", \"2\":\"Flights\", \"3\":\"Cars\", \"4\":\"Rail\", \"5\":\"Transport\", \"6\":\"Tours\", \"7\":\"Cruises\", \"8\":\"Packages\", \"9\":\"Other\"}"],
                ],
            },
        })
        //*/
        
        /*
        let table = $("#product_index_table").DataTable({})
        $('#product_index_table tbody').on('click', 'tr', function () {
            if ($(this).hasClass('selected')) {
                $(this).removeClass('selected')
            } else {
                table.$('tr.selected').removeClass('selected')
                $(this).addClass('selected')
            }
        })
        //*/
        
    })
    
    const formatURL = function (param) {
        Console.log("formatURL()", param)
        return encodeURIComponent(param.trim())
    }
    
    const buildMapsURL = function (location) {
        Console.log("buildMapsURL(location)", location)
        let street_1, street_2, zipcode, city_name, province_name, country_name
        
        street_1 = (location.street_1) ? location.street_1 : null
        street_2 = (location.street_2) ? location.street_2 : null
        zipcode = (location.zipcode) ? location.zipcode : null
        city_name = (location.city.name) ? location.city.name : null
        province_name = (location.province.iso2) ? location.province.iso2 : (location.province.iso3) ? location.province.iso3 : (location.province.name) ? location.province.name : null
        country_name = (location.province.name) ? location.country.name : (location.country.iso2) ? location.country.iso2 : (location.country.iso3) ? location.country.iso3 : null
        
        street_1 = (street_1 !== null) ? street_1 : null
        street_2 = (street_2 !== null) ? street_2 : null
        zipcode = (zipcode !== null) ? zipcode : null
        city_name = (city_name !== null) ? city_name : null
        province_name = (province_name !== null) ? province_name : null
        country_name = (country_name !== null) ? country_name : null
        
        /*
        
        // Viale Rinascimento, 141, 63074 San Benedetto del Tronto AP, Italy
        // +39 0735 615400
        // https://www.smeraldosuitehotel.com/
        // CITY - San Benedetto Del Tronto: 844
        // PROVINCE - Ascoli Piceno: 186
        // COUNTRY - Italy: 102
        
        Console.log("street_1", street_1)
        Console.log("street_2", street_2)
        Console.log("city_name", city_name)
        Console.log("province_name", province_name)
        Console.log("country_name", country_name)
        Console.log("zipcode", zipcode)
        //*/
        
        let tempURL = []
        
        if (!is_null(street_1)) {
            tempURL.push(street_1)
        }
        
        if (!is_null(street_2)) {
            tempURL.push(street_2)
        }
        
        if (!is_null(city_name)) {
            //tempURL.push(city_name)
        }
        
        let provinceLine = ""
        
        if (!is_null(city_name) && !is_null(province_name) && !is_null(zipcode)) {
            provinceLine = zipcode + " " + city_name + " " + province_name
        } else if (is_null(city_name) && !is_null(province_name) && !is_null(zipcode)) {
            provinceLine = zipcode + " " + province_name
        } else if (is_null(city_name) && is_null(province_name) && !is_null(zipcode)) {
            provinceLine = zipcode
        } else if (!is_null(city_name) && is_null(province_name) && !is_null(zipcode)) {
            provinceLine = zipcode + " " + city_name
        } else if (!is_null(city_name) && !is_null(province_name) && is_null(zipcode)) {
            provinceLine = city_name + " " + province_name
        } else {
        
        }
        if (provinceLine !== "") {
            tempURL.push(provinceLine)
        }
        
        if (!is_null(country_name)) {
            tempURL.push(country_name)
        }
        
        let location_formatted = tempURL.join(", ")
        location_formatted = formatURL(location_formatted)
        return `https://maps.google.com/maps?q=${location_formatted}&t=&z=7&ie=UTF8&iwloc=&output=embed`
    }
    
    const weatherUpdate = function (city) {
        const xhr = new XMLHttpRequest()
        const apiKey = "2ad550b2d7e352b38c3ca9da8396aade"
        let cityName = city
        xhr.open(
          "GET",
          `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${apiKey}`)
        
        xhr.send()
        xhr.onload = () => {
            if (xhr.status === 404) {
                Console.log(`${cityName} not found`)
            } else {
                let data = JSON.parse(xhr.response)
                let mainWeatherCityName = data.name
                let mainWeatherTemperature = `${Math.round(data.main.temp - 273.15)}°C`
                let mainWeather = data.weather[0].main
                let mainWeatherDescription = data.weather[0].description
                let mainWeatherImage = `https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`
                Console.log("mainWeatherCityName", mainWeatherCityName)
                Console.log("mainWeatherTemperature", mainWeatherTemperature)
                Console.log("mainWeather", mainWeather)
                Console.log("mainWeatherDescription", mainWeatherDescription)
                Console.log("mainWeatherImage", mainWeatherImage)//100x100
                Console.log("data", data)
            }
        }
    }
    
    //weatherUpdate("paris")
</script>
