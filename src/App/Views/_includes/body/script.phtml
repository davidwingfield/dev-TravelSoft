<!-- Icon -->
<script type="text/javascript">
	const Icon = (function () {
		
		const loadAll = function (icons) {
			Icon.all = new Map()
			
		}
		
		const init = function (settings) {
			if (settings) {
				if (settings.icons) {
					loadAll(settings.icons)
				}
			}
		}
		
		return {
			all: new Map(),
			init: function (settings) {
				return init(settings)
			},
		}
	})()
</script>
<!-- /Icon -->

<!-- Page -->
<script type="text/javascript">
	const Page = (function () {
		"use strict"
		const _table_pages_index = document.getElementById("table_pages_index")
		const _page_index_section = document.getElementById("page_index_section")
		
		let $table_pages_index
		let user_id = (document.getElementById('user_id')) ? (!isNaN(parseInt(document.getElementById('user_id').value))) ? parseInt(document.getElementById('user_id').value) : 4 : 4
		
		const addRow = function (page) {
			//console.log("Page.addRow(page)", page)
			$table_pages_index.insertRow(page)
		}
		
		const buildIndexTable = function () {
			//console.log("Page.buildIndexTable()")
			if (_table_pages_index) {
				$table_pages_index = $(_table_pages_index).table({
					table_type: "display_list",
					data: Array.from(Page.all.values()),
					columnDefs: [
						{
							title: "Id",
							targets: 0,
							data: "id",
							render: function (data, type, row, meta) {
								return "<span style='white-space: nowrap;'>" + data + "</span>"
							},
						}, {
							title: "Title",
							targets: 1,
							data: "title",
							render: function (data, type, row, meta) {
								return "<span style='white-space: nowrap;'>" + data + "</span>"
							},
						}, {
							title: "Path",
							targets: 2,
							data: "path",
							render: function (data, type, row, meta) {
								return "<span style='white-space: nowrap;'>" + data + "</span>"
							},
						},
					],
					rowClick: Page.edit,
				})
			}
		}
		
		const set = function (page) {
			//console.log("Page.set(page)", page)
			let detail = defaultDetail()
			if (page) {
				detail.id = (page.id && !isNaN(parseInt(page.id))) ? parseInt(page.id) : null
				detail.menu_id = (page.menu_id && !isNaN(parseInt(page.menu_id))) ? parseInt(page.menu_id) : null
				detail.path = (page.path) ? page.path : null
				detail.title = (page.title) ? page.title : null
				detail.sub_title = (page.sub_title) ? page.sub_title : null
				detail.heading = (page.heading) ? page.heading : null
				detail.sub_heading = (page.sub_heading) ? page.sub_heading : null
				detail.description = (page.description) ? page.description : null
				detail.keywords = (page.keywords) ? page.keywords : []
				detail.enabled = (page.enabled) ? page.enabled : 1
				detail.date_created = (page.date_created) ? page.date_created : formatDateMySQL()
				detail.created_by = (page.created_by) ? page.created_by : user_id
				detail.date_modified = (page.date_modified) ? page.date_modified : formatDateMySQL()
				detail.modified_by = (page.modified_by) ? page.modified_by : user_id
				detail.note = (page.note) ? page.note : null
			}
			return detail
		}
		
		const defaultDetail = function () {
			//console.log("Page.defaultDetail()")
			return {
				id: null,
				menu_id: null,
				path: null,
				title: null,
				sub_title: null,
				heading: null,
				sub_heading: null,
				description: null,
				keywords: null,
				enabled: null,
				date_created: null,
				created_by: null,
				date_modified: null,
				modified_by: null,
				note: null,
			}
		}
		const edit = function (page) {
			//console.log("Page.edit(page)", page)
			
		}
		
		let tempDetail = null
		
		const loadAll = function (pages) {
			//console.log("Page.loadAll(pages)", pages)
			Page.all = new Map()
			
			if (pages && pages.length) {
				let counter = 0
				tempDetail = null
				$.each(pages, function (k, page) {
					let detail = set(page)
					//console.log("        detail - ", detail)
					if (counter === 0) {tempDetail = detail}
					
					if (detail.id) {
						Page.all.set(detail.id, detail)
						addRow(detail)
					}
					counter++
				})
			} else {
				tempDetail = null
			}
			
			if (tempDetail !== null) {
				$table_pages_index.clearSelectedRows()
				$table_pages_index.jumpToRow(tempDetail)
			}
		}
		
		const init = function (settings) {
			console.log("Page.init(settings)", settings)
			if (_page_index_section) {
				buildIndexTable()
				
				if (settings) {
					if (settings.pages) {
						loadAll(settings.pages)
						//console.log("    Page.all - ", Array.from(Page.all.values()))
					}
				}
			}
		}
		
		return {
			detail: {},
			all: new Map(),
			edit: function (page) {
				edit(page)
			},
			init: function (settings) {
				init(settings)
			},
		}
		
	})()
</script>
<!-- /Page -->

<!-- Product -->
<script type="text/javascript">
	const Product = (function () {
		"use strict"
		const base_url = "/products"
		const _modal_product_depart_from_time = document.getElementById("modal_product_depart_from_time")
		const _modal_product_depart_from_date = document.getElementById("modal_product_depart_from_date")
		const _modal_product_arrive_to_time = document.getElementById("modal_product_arrive_to_time")
		const _modal_product_arrive_to_date = document.getElementById("modal_product_arrive_to_date")
		const _modal_product_depart_from_airport = document.getElementById("modal_product_depart_from_airport")
		const _modal_product_arrive_to_airport = document.getElementById("modal_product_arrive_to_airport")
		const _modal_product_depart_from_station = document.getElementById("modal_product_depart_from_station")
		const _modal_product_arrive_to_station = document.getElementById("modal_product_arrive_to_station")
		const _modal_product_depart_from_airport_id = document.getElementById("modal_product_depart_from_airport_id")
		const _modal_product_arrive_to_airport_id = document.getElementById("modal_product_arrive_to_airport_id")
		const _modal_product_depart_from_station_id = document.getElementById("modal_product_depart_from_station_id")
		const _modal_product_arrive_to_station_id = document.getElementById("modal_product_arrive_to_station_id")
		const _modal_button_cancel_add_product = document.getElementById("modal_button_cancel_add_product")
		const _modal_button_submit_add_product = document.getElementById("modal_button_submit_add_product")
		const _modal_product_provider_name = document.getElementById("modal_product_provider_name")
		const _modal_product_vendor_name = document.getElementById("modal_product_vendor_name")
		const _modal_product_provider_id = document.getElementById("modal_product_provider_id")
		const _modal_product_vendor_id = document.getElementById("modal_product_vendor_id")
		const _modal_new_product = document.getElementById("modal_new_product")
		const _modal_product_name = document.getElementById("modal_product_name")
		const _modal_product_category_id = document.getElementById("modal_product_category_id")
		const _modal_product_sku = document.getElementById("modal_product_sku")
		const _modal_product_rating_types_id = document.getElementById("modal_product_rating_types_id")
		const _modal_product_currency_id = document.getElementById("modal_product_currency_id")
		const _modal_product_pricing_strategies_types_id = document.getElementById("modal_product_pricing_strategies_types_id")
		const _modal_product_provider_company_id = document.getElementById("modal_product_provider_company_id")
		const _modal_product_vendor_company_id = document.getElementById("modal_product_vendor_company_id")
		const _modal_product_provider_vendor_match = document.getElementById("modal_product_provider_vendor_match")
		const _modal_product_provider_location_id = document.getElementById("modal_product_provider_location_id")
		const _modal_product_location_id = document.getElementById("modal_product_location_id")
		const _modal_product_street_1 = document.getElementById("modal_product_street_1")
		const _modal_product_street_2 = document.getElementById("modal_product_street_2")
		const _modal_product_postal_code = document.getElementById("modal_product_postal_code")
		const _modal_product_city = document.getElementById("modal_product_city")
		const _modal_product_city_id = document.getElementById("modal_product_city_id")
		const _modal_button_clear_add_product = document.getElementById("modal_button_clear_add_product")
		const _modal_product_depart_from_station_date = document.getElementById("modal_product_depart_from_station_date")
		const _modal_product_arrive_to_station_date = document.getElementById("modal_product_arrive_to_station_date")
		const _modal_product_depart_from_station_time = document.getElementById("modal_product_depart_from_station_time")
		const _modal_product_arrive_to_station_time = document.getElementById("modal_product_arrive_to_station_time")
		const _form_product_add = document.getElementById("form_product_add")
		const _product_edit_page = document.getElementById("product_edit_page")
		const _product_panel_link_overview = document.getElementById("product_panel_link_overview")
		const _panel_tab_product_o = document.getElementById("panel_tab_product_o")
		const _product_panel_link_product = document.getElementById("product_panel_link_product")
		const _panel_tab_product = document.getElementById("panel_tab_product")
		const _product_panel_link_season = document.getElementById("product_panel_link_season")
		const _panel_tab_season = document.getElementById("panel_tab_season")
		const _product_panel_link_unit = document.getElementById("product_panel_link_unit")
		const _panel_tab_unit = document.getElementById("panel_tab_unit")
		const _product_panel_link_variant = document.getElementById("product_panel_link_variant")
		const _panel_tab_variant = document.getElementById("panel_tab_variant")
		const _product_panel_link_inventory = document.getElementById("product_panel_link_inventory")
		const _panel_tab_inventory = document.getElementById("panel_tab_inventory")
		const _product_panel_link_pricing = document.getElementById("product_panel_link_pricing")
		const _panel_tab_pricing = document.getElementById("panel_tab_pricing")
		const _panel_tab_location = document.getElementById("panel_tab_location")
		const _panel_tab_product_location = document.getElementById("panel_tab_product_location")
		const _panel_tab_product_meta = document.getElementById("panel_tab_product_meta")
		const _panel_tab_meta = document.getElementById("panel_tab_meta")
		const _product_panel_link_meta = document.getElementById("product_panel_link_meta")
		const _product_panel_link_location = document.getElementById("product_panel_link_location")
		const _product_edit_details_currency_id = document.getElementById("product_edit_details_currency_id")
		const _product_edit_details_rating_types_id = document.getElementById("product_edit_details_rating_types_id")
		const _product_keywords = document.getElementById("product_keywords")
		const _product_edit_meta_description_long = document.getElementById("product_edit_meta_description_long")
		const _product_edit_meta_description_short = document.getElementById("product_edit_meta_description_short")
		const _product_index_page = document.getElementById("product_index_page")
		const _product_index_table = document.getElementById("product_index_table")
		const _product_amenities = document.getElementById("product_amenities")
		const _product_id = document.getElementById("product_id")
		const _product_edit_details_name = document.getElementById("product_edit_details_name")
		const _product_edit_details_enabled = document.getElementById("product_edit_details_enabled")
		const _product_edit_details_sku = document.getElementById("product_edit_details_sku")
		const _pricing_strategy_types_id = document.getElementById("pricing_strategy_types_id")
		const _product_edit_location_city_id = document.getElementById("product_edit_location_city_id")
		const _product_edit_location_id = document.getElementById("product_edit_location_id")
		const _provider_id = document.getElementById("provider_id")
		const _vendor_id = document.getElementById("vendor_id")
		const _product_name = document.getElementById("product_name")
		const _display_product_name = document.getElementById("display_product_name")
		const _button_save_product = document.getElementById("button_save_product")
		const _button_add_product_page_heading = document.getElementById("button_add_product_page_heading")
		const _category_id = document.getElementById("category_id")
		
		let $product_keywords, $product_amenities
		let provider_initial_location, product_initial_location = {}
		let radios = document.querySelectorAll('input[type=radio][name="location_to_use"]')
		let user_id = (document.getElementById("user_id")) ? (!isNaN(parseInt(document.getElementById("user_id").value))) ? parseInt(document.getElementById("user_id").value) : 4 : 4
		let $index_table, newProduct_validator
		let add_modal_form_rules = {
			groups: {
				departAirport: "modal_product_depart_from_airport modal_product_depart_from_airport_id",
				city: "modal_product_city modal_product_city modal_product_city_id",
			},
			
			rules: {
				modal_product_sku: {
					required: true,
				},
				modal_product_depart_from_airport: {
					required: function (element) {
						return $("#modal_product_category_id").val() === "2"
					},
				},
				modal_product_depart_from_airport_id: {
					required: function (element) {
						return $("#modal_product_category_id").val() === "2"
					},
				},
				modal_product_arrive_to_airport: {
					required: function (element) {
						return $("#modal_product_category_id").val() === "2"
					},
				},
				modal_product_arrive_to_airport_id: {
					required: function (element) {
						return $("#modal_product_category_id").val() === "2"
					},
				},
				modal_product_rating_types_id: {
					required: true,
				},
				modal_product_city: {
					required: function (element) {
						return $("#modal_product_category_id").val() === "1"
					},
				},
				modal_product_city_id: {
					required: true,
				},
				modal_product_currency_id: {
					required: true,
				},
				modal_product_pricing_strategies_types_id: {
					required: true,
				},
				modal_product_name: {
					required: true,
				},
				modal_product_category_id: {
					required: true,
				},
				modal_product_provider_name: {
					required: true,
				},
				modal_product_provider_id: {
					required: true,
				},
				modal_product_provider_company_id: {
					required: true,
				},
				modal_product_vendor_name: {
					required: true,
				},
				modal_product_vendor_id: {
					required: true,
				},
				modal_product_vendor_company_id: {
					required: true,
				},
			},
			messages: {
				modal_product_city_id: {
					required: "Field Required",
				},
				modal_product_sku: {
					required: "Field Required",
				},
				modal_product_rating_types_id: {
					required: "Field Required",
				},
				modal_product_currency_id: {
					required: "Field Required",
				},
				modal_product_pricing_strategies_types_id: {
					required: "Field Required",
				},
				modal_product_name: {
					required: "Field Required",
				},
				modal_product_provider_id: {
					required: "Field Required",
				},
				modal_product_category_id: {
					required: "Field Required",
				},
				modal_product_provider_name: {
					required: "Field Required",
				},
				modal_product_vendor_name: {
					required: "Field Required",
				},
				modal_product_provider_company_id: {
					required: "Field Required",
				},
				modal_product_vendor_id: {
					required: "Field Required",
				},
				modal_product_vendor_company_id: {
					required: "Field Required",
				},
			},
		}
		
		$(_product_edit_details_name)
			.on("change", function () {
				_display_product_name.innerText = _product_edit_details_name.value
			})
		
		$(_product_edit_details_rating_types_id)
			.on("change", function () {
				let rating = (!isNaN(parseInt(_product_edit_details_rating_types_id.value))) ? parseInt(_product_edit_details_rating_types_id.value) : 0
				let ratingDisplay = ""
				for (let n = 0; n < rating; n++) {
					ratingDisplay += `
						<li class="list-inline-item mr-0">
                            <i class="fas fa-star"></i>
                        </li>
					`
				}
				
				$("ul.rating")
					.empty()
					.html(ratingDisplay)
			})
		
		$(_button_save_product)
			.on("click", function () {
				save()
			})
		
		$(_button_add_product_page_heading)
			.on("click", function () {
				setNewProductModal()
			})
		
		$(_modal_new_product)
			.on("hide.bs.modal", function () {
				clearModalForm()
				//clearValidation(_form_product_add)
			})
		
		$(_modal_button_cancel_add_product)
			.on("click", function () {
				clearModalForm()
				Airport.resetAirportForm("depart_from")
				Airport.resetAirportForm("arrive_to")
				Station.resetStationForm("depart_from")
				Station.resetStationForm("arrive_to")
				clearValidation(_form_product_add)
				$(_modal_new_product).modal("hide")
			})
		
		$(_modal_button_submit_add_product)
			.on("click", function () {
				if (validateNewProduct()) {
					confirmDialog(`Would you like to update?`, (ans) => {
						if (ans) {
							saveNewProduct()
						}
					})
				}
			})
		
		$(_modal_product_provider_vendor_match)
			.on("change", function () {
				let provider_company_id = (isNaN(parseInt(_modal_product_provider_company_id.value))) ? null : parseInt(_modal_product_provider_company_id.value)
				
				if (provider_company_id !== null) {
					
					if (_modal_product_provider_vendor_match.checked) {
						_modal_product_vendor_company_id.value = _modal_product_provider_company_id.value
						
						if (Provider.detail !== null) {
							_modal_product_vendor_company_id.value = Provider.detail.vendor.company_id
							_modal_product_vendor_id.value = Provider.detail.vendor.id
							_modal_product_vendor_name.value = Provider.detail.vendor.name
						} else {
							_modal_product_vendor_company_id.value = ""
							_modal_product_vendor_id.value = ""
							_modal_product_vendor_name.value = ""
						}
						
					} else {
						_modal_product_vendor_company_id.value = ""
						_modal_product_vendor_id.value = ""
						_modal_product_vendor_name.value = ""
					}
				}
			})
		
		$(_modal_button_clear_add_product)
			.on("click", function () {
				clearModalForm()
			})
		
		$("#page")
			.on("change", function () {
				updateProgress()
			})
		
		const validateProductRecord = function () {
			let isValid = true
			
			return isValid
		}
		
		const initAutoComplete = function () {
			let category_id = (!isNaN(parseInt(_modal_product_category_id.value))) ? parseInt(_modal_product_category_id.value) : null
			
			if (category_id !== null) {
				$(_modal_product_name)
					.on("change", function () {
						/*
						setTimeout(function () {
							let provider_name = _provider_name.value
							
							if (globalSelectedProvider === false) {
								if (provider_name === "") {
									_provider_name.value = ""
									_provider_company_id.value = ""
									globalSelectedProvider = false
									$(_vendor_name).val("").trigger("change")
									$(_provider_company_id).val("").trigger("change")
								} else {
									provider_exists(provider_name)
								}
							}
						}, 200)
						//*/
					})
					.on("search", function () {
					
					})
					.on("click", function () {
						if ($(this).attr("readonly") === "readonly") {
							e.preventDefault()
						} else {
							$(this).select()
						}
					})
					.autocomplete({
						serviceUrl: "/api/v1.0/autocomplete/products",
						minChars: 2,
						params: { "category_id": category_id },
						cache: false,
						dataType: "json",
						triggerSelectOnValidInput: false,
						paramName: "st",
						onSelect: function (suggestion) {
							if (!suggestion || !suggestion.data) {
								return
							}
							//console.log("suggestion.data", suggestion.data)
							let product = suggestion.data
							//console.log("product", product)
						},
					})
			}
		}
		
		const updateProgress = function () {
			if (_product_edit_page) {
				let variants = Array.from(Variant.all.values())
				let units = Array.from(Unit.all.values())
				let seasons = Array.from(Season.all.values())
				let calendarButtons = document.querySelectorAll("button[data-target='#seasonCalendarModal']")
				if (variants.length === 0 || units.length === 0 || seasons.length === 0) {
					calendarButtons.forEach(el => {
						el.disabled = true
					})
					
					_button_save_product.disabled = true
					
					$(_panel_tab_pricing).addClass(`disabled`)
					$(_panel_tab_inventory).addClass(`disabled`)
					$("#panel_tab_pricing")
						.html("Pricing <span class='badge rounded-pill badge-notification bg-danger tab-badge' style='color:#fff!important'>!</span>")
				} else {
					calendarButtons.forEach(el => {
						el.disabled = false
					})
					$(_panel_tab_pricing).removeClass(`disabled`)
					$(_panel_tab_inventory).removeClass(`disabled`)
					
					let pricingWorksheet = PricingWorksheet.status()
					if (pricingWorksheet === "incomplete") {
						_button_save_product.disabled = true
						$("#panel_tab_pricing")
							.html("Pricing <span class='badge rounded-pill badge-notification bg-danger tab-badge' style='color:#fff!important'>!</span>")
					} else {
						_button_save_product.disabled = false
						$("#panel_tab_pricing")
							.html("Pricing")
					}
				}
			}
		}
		
		const buildInsertData = function () {
			let categoryId = (!isNaN(parseInt(_modal_product_category_id.value))) ? parseInt(_modal_product_category_id.value) : null
			let depart_from, arrive_to
			
			if (categoryId === 2) {
				depart_from = (!isNaN(parseInt(_modal_product_depart_from_airport_id.value))) ? parseInt(_modal_product_depart_from_airport_id.value) : null
				arrive_to = (!isNaN(parseInt(_modal_product_arrive_to_airport_id.value))) ? parseInt(_modal_product_arrive_to_airport_id.value) : null
			} else if (categoryId === 4) {
				depart_from = (!isNaN(parseInt(_modal_product_depart_from_station_id.value))) ? parseInt(_modal_product_depart_from_station_id.value) : null
				arrive_to = (!isNaN(parseInt(_modal_product_arrive_to_station_id.value))) ? parseInt(_modal_product_arrive_to_station_id.value) : null
			} else {
				depart_from = null
				arrive_to = null
			}
			
			let dataToSend = {
				city_id: (!isNaN(parseInt(_modal_product_city_id.value))) ? parseInt(_modal_product_city_id.value) : null,
				
				depart_from: depart_from,
				arrive_to: arrive_to,
				
				street_1: (_modal_product_street_1.value !== "") ? _modal_product_street_1.value : null,
				street_2: (_modal_product_street_2.value !== "") ? _modal_product_street_2.value : null,
				postal_code: (_modal_product_postal_code.value !== "") ? _modal_product_postal_code.value : null,
				category_id: categoryId,
				pricing_strategy_types_id: (!isNaN(parseInt(_modal_product_pricing_strategies_types_id.value))) ? parseInt(_modal_product_pricing_strategies_types_id.value) : null,
				status_types_id: 1,
				currency_id: (!isNaN(parseInt(_modal_product_currency_id.value))) ? parseInt(_modal_product_currency_id.value) : null,
				location_id: (!isNaN(parseInt(_modal_product_location_id.value))) ? parseInt(_modal_product_location_id.value) : null,
				rating_types_id: (!isNaN(parseInt(_modal_product_rating_types_id.value))) ? parseInt(_modal_product_rating_types_id.value) : null,
				provider_id: (!isNaN(parseInt(_modal_product_provider_id.value))) ? parseInt(_modal_product_provider_id.value) : null,
				vendor_id: (!isNaN(parseInt(_modal_product_vendor_id.value))) ? parseInt(_modal_product_vendor_id.value) : null,
				provider_vendor_match: (((!isNaN(parseInt(_modal_product_provider_company_id.value))) ? parseInt(_modal_product_provider_company_id.value) : null) === ((!isNaN(parseInt(_modal_product_vendor_company_id.value))) ? parseInt(_modal_product_vendor_company_id.value) : null)) ? 1 : 0,
				name: _modal_product_name.value,
				sku: _modal_product_sku.value,
				use_provider_location_id: 0,
			}
			
			if (categoryId === 2) {
				dataToSend.depart_from = (!isNaN(parseInt(_modal_product_depart_from_airport_id.value))) ? parseInt(_modal_product_depart_from_airport_id.value) : null
				dataToSend.depart_date = (Product.depart_from_date.value() !== "") ? Product.depart_from_date.value() : null
				dataToSend.depart_time = (Product.depart_from_time.value() !== "") ? Product.depart_from_time.value() : null
				dataToSend.arrive_to = (!isNaN(parseInt(_modal_product_arrive_to_airport_id.value))) ? parseInt(_modal_product_arrive_to_airport_id.value) : null
				dataToSend.arrive_date = (Product.arrive_to_date.value() !== "") ? Product.arrive_to_date.value() : null
				dataToSend.arrive_time = (Product.arrive_to_time.value() !== "") ? Product.arrive_to_time.value() : null
			}
			
			return remove_nulls(dataToSend)
		}
		
		const saveNewProduct = function () {
			let dataToSend = buildInsertData()
			let product
			
			console.log("dataToSend", dataToSend)
			newProduct(dataToSend, function (data) {
				if (data) {
					product = data
					if (data.length === 1) {
						product = data[0]
					}
					
					if (product.id) {
						let detail = set(product)
						console.log("detail", detail)
						$index_table.insertRow(detail)
						$index_table.loadRow(detail)
						$index_table.jumpToRow(detail)
						$index_table.clearSelectedRows()
						toastr["success"](`Product - ${product.id} was created, would you like to edit?`, "Product Created")
						//window.location.replace("/products/" + product.id)
					}
				}
			})
		}
		
		const newProduct = function (dataToSend, callback) {
			let url = "/api/v1.0/products/add"
			
			if (dataToSend) {
				try {
					sendPostRequest(url, dataToSend, function (data, status, xhr) {
						if (data) {
							return callback(data)
						} else {
							handleProductError("Oops: 1")
						}
					})
				} catch (e) {
					console.log("error", e)
					handleProductError("Oops: 1")
				}
			}
		}
		
		const validateNewProduct = function () {
			//console.log("validateNewProduct", "")
			
			if (_form_product_add) {
				return $(_form_product_add).valid()
			}
			
			return false
		}
		
		const clearModalForm = function () {
			_modal_product_name.value = ""
			
			_modal_product_street_1.value = ""
			_modal_product_street_2.value = ""
			_modal_product_postal_code.value = ""
			
			Product.depart_from_date.value("")
			Product.arrive_to_date.value("")
			
			_modal_product_depart_from_airport.value = ""
			_modal_product_arrive_to_airport.value = ""
			_modal_product_depart_from_station.value = ""
			_modal_product_arrive_to_station.value = ""
			_modal_product_depart_from_airport_id.value = ""
			_modal_product_arrive_to_airport_id.value = ""
			_modal_product_depart_from_station_id.value = ""
			_modal_product_arrive_to_station_id.value = ""
			
			_modal_product_category_id.value = ""
			_modal_product_sku.value = ""
			_modal_product_rating_types_id.value = ""
			_modal_product_currency_id.value = ""
			_modal_product_provider_company_id.value = ""
			_modal_product_vendor_company_id.value = ""
			
			_modal_product_pricing_strategies_types_id.value = ""
			_modal_product_provider_location_id.value = ""
			_modal_product_location_id.value = ""
			_modal_product_city.value = ""
			_modal_product_city_id.value = ""
			
			Product.attr1 = null
			Product.attr2 = null
			Product.attr3 = null
			Product.updateProductSKU()
			
			$("div[data-categoryid]").hide()
			
			Product.resetNewProductDetails()
		}
		
		const resetNewProductDetails = function () {
			Product.depart_from_date.value("")
			Product.arrive_to_date.value("")
			
			Airport.resetAirportForm("depart_from")
			Airport.resetAirportForm("arrive_to")
			
			Station.resetStationForm("depart_from")
			Station.resetStationForm("arrive_to")
			
			_modal_product_depart_from_time.value = ""
			_modal_product_arrive_to_time.value = ""
			_modal_product_depart_from_airport.value = ""
			_modal_product_arrive_to_airport.value = ""
			_modal_product_provider_id.value = ""
			_modal_product_vendor_id.value = ""
			_modal_product_provider_name.value = ""
			_modal_product_vendor_name.value = ""
			_modal_product_city.value = ""
			_modal_product_name.value = ""
			_modal_product_sku.value = ""
			_modal_product_city_id.value = ""
			_modal_product_rating_types_id.value = ""
			_modal_product_currency_id.value = ""
			_modal_product_pricing_strategies_types_id.value = ""
			
			_modal_product_name.disabled = true
			_modal_product_sku.disabled = true
			_modal_product_rating_types_id.disabled = true
			_modal_product_currency_id.disabled = true
			_modal_product_pricing_strategies_types_id.disabled = true
			_modal_product_city.disabled = true
			
			clearValidation(_form_product_add)
		}
		
		const setNewProductModal = function () {
			clearModalForm()
			
			$(_modal_new_product).modal("show")
		}
		
		const defaultDetail = function () {
			return {
				id: null,
				category_id: null,
				pricing_strategy_types_id: null,
				status_types_id: null,
				product_status_types_id: null,
				currency_id: null,
				location_id: null,
				city_id: null,
				vendor_id: null,
				provider_id: null,
				name: null,
				provider_vendor_match: 1,
				description_short: null,
				description_long: null,
				rating: null,
				sku: null,
				phone: null,
				infant: null,
				child: null,
				teen: null,
				depart_from: null,
				arrive_to: null,
				depart_time: null,
				arrive_time: null,
				day_span: null,
				cover_image: null,
				api_id: null,
				from_api: 1,
				hotel_code: null,
				enabled: 1,
				date_created: formatDateMySQL(),
				created_by: user_id,
				date_modified: formatDateMySQL(),
				modified_by: user_id,
				note: null,
				amenities: "",
				keywords: "",
				seasons: [],
				units: [],
				use_provider_location: 0,
				variants: [],
				category: {},
				location: {},
				vendor: {},
				profiles: [],
				provider: {},
			}
		}
		
		const sendUpdateRequest = function (dataToSend, callback) {
			let url = "/api/v1.0/products/update"
			
			if (dataToSend) {
				try {
					sendPostRequest(url, dataToSend, function (data, status, xhr) {
						if (data) {
							return callback(data)
						} else {
							handleProductError("Oops: 1")
						}
					})
				} catch (e) {
					console.log("error", e)
					handleProductError("Oops: 1")
				}
			}
		}
		
		const buildProductRecord = function () {
			
			if (validateProductRecord()) {
				let detail = {
					id: (!isNaN(parseInt(_product_id.value))) ? parseInt(_product_id.value) : null,
					category_id: (!isNaN(parseInt(_category_id.value))) ? parseInt(_category_id.value) : null,
					description_short: (_product_edit_meta_description_short && _product_edit_meta_description_short.value !== "") ? _product_edit_meta_description_short.value : null,
					description_long: (_product_edit_meta_description_long && _product_edit_meta_description_long.value !== "") ? _product_edit_meta_description_long.value : null,
					amenities: $product_amenities.build(),
					keywords: $product_keywords.build(),
					rating_types_id: (!isNaN(parseInt(_product_edit_details_rating_types_id.value))) ? parseInt(_product_edit_details_rating_types_id.value) : null,
					currency_id: (!isNaN(parseInt(_product_edit_details_currency_id.value))) ? parseInt(_product_edit_details_currency_id.value) : null,
					name: (_product_edit_details_name.value !== "") ? _product_edit_details_name.value : null,
					pricing_strategy_types_id: (!isNaN(parseInt(_pricing_strategy_types_id.value))) ? parseInt(_pricing_strategy_types_id.value) : null,
					city_id: (!isNaN(parseInt(_product_edit_location_city_id.value))) ? parseInt(_product_edit_location_city_id.value) : null,
					location_id: (!isNaN(parseInt(_product_edit_location_id.value))) ? parseInt(_product_edit_location_id.value) : null,
					provider_id: (!isNaN(parseInt(_provider_id.value))) ? parseInt(_provider_id.value) : null,
					vendor_id: (!isNaN(parseInt(_vendor_id.value))) ? parseInt(_vendor_id.value) : null,
					use_provider_location_id: 0,
					provider_vendor_match: 1,
					status_types_id: 1,
					enabled: (_product_edit_details_enabled.checked) ? 1 : 0,
					sku: (_product_edit_details_sku.value !== "") ? _product_edit_details_sku.value : null,
				}
				
				return removeNulls(detail)
			}
		}
		
		const save = function () {
			let dataToSend = buildProductRecord()
			console.log("dataToSend", dataToSend)
			
			if (dataToSend) {
				confirmDialog(`Would you like to update?`, (ans) => {
					if (ans) {
						sendUpdateRequest(dataToSend, function (data) {
							let product
							if (data) {
								product = data
								if (data[0]) {
									product = data[0]
								}
							}
							
							if (product.id) {
								let detail = set(product)
								console.log("product", product)
								console.log("detail", detail)
								toastr.success(`Product - ${product.id} was updated.`)
								
							}
						})
					}
				})
			}
			
		}
		
		const navigate = function (product) {
			if (product && product.id) {
				window.location.replace(base_url + "/" + product.id)
			}
		}
		
		const get = function (id) {
			let data_to_send = {}
			if (id) {
				data_to_send.id = id
			}
			
		}
		
		const set = function (product) {
			let detail = defaultDetail()
			
			if (product) {
				detail.id = (product.id) ? product.id : null
				detail.category_id = (product.category_id) ? product.category_id : null
				detail.pricing_strategy_types_id = (product.pricing_strategy_types_id) ? product.pricing_strategy_types_id : null
				detail.status_types_id = (product.status_types_id) ? product.status_types_id : null
				detail.product_status_types_id = (product.product_status_types_id) ? product.product_status_types_id : null
				detail.currency_id = (product.currency_id) ? product.currency_id : null
				detail.location_id = (product.location_id) ? product.location_id : null
				detail.city_id = (product.city_id) ? product.city_id : null
				detail.vendor_id = (product.vendor_id) ? product.vendor_id : null
				detail.provider_id = (product.provider_id) ? product.provider_id : null
				detail.name = (product.name) ? product.name : null
				detail.provider_vendor_match = (product.provider_vendor_match) ? product.provider_vendor_match : 1
				detail.description_short = (product.description_short) ? product.description_short : null
				detail.description_long = (product.description_long) ? product.description_long : null
				detail.rating = (product.rating) ? product.rating : null
				detail.sku = (product.sku) ? product.sku : null
				detail.phone = (product.phone) ? product.phone : null
				detail.infant = (product.infant) ? product.infant : null
				detail.child = (product.child) ? product.child : null
				detail.teen = (product.teen) ? product.teen : null
				detail.depart_from = (product.depart_from) ? product.depart_from : null
				detail.arrive_to = (product.arrive_to) ? product.arrive_to : null
				detail.depart_time = (product.depart_time) ? product.depart_time : null
				detail.arrive_time = (product.arrive_time) ? product.arrive_time : null
				detail.day_span = (product.day_span) ? product.day_span : null
				detail.cover_image = (product.cover_image) ? product.cover_image : null
				detail.api_id = (product.api_id) ? product.api_id : null
				detail.from_api = (product.from_api) ? product.from_api : 1
				detail.hotel_code = (product.hotel_code) ? product.hotel_code : null
				detail.enabled = (product.enabled) ? product.enabled : 1
				detail.date_created = (product.date_created) ? product.date_created : formatDateMySQL()
				detail.created_by = (product.created_by) ? product.created_by : user_id
				detail.date_modified = (product.date_modified) ? product.date_modified : formatDateMySQL()
				detail.modified_by = (product.modified_by) ? product.modified_by : user_id
				detail.note = (product.note) ? product.note : null
				detail.category = (product.category) ? product.category : {}
				detail.keywords = (product.keywords) ? product.keywords : ""
				detail.amenities = (product.amenities) ? product.amenities : ""
				detail.seasons = (product.seasons) ? product.seasons : []
				detail.units = (product.units) ? product.units : []
				detail.use_provider_location = (product.use_provider_location) ? product.use_provider_location : 0
				detail.variants = (product.variants) ? product.variants : []
				detail.location = (product.location) ? product.location : {}
				detail.vendor = (product.vendor) ? product.vendor : {}
				detail.provider = (product.provider) ? product.provider : {}
			}
			
			Product.detail = detail
			return detail
		}
		
		const loadAll = function (products) {
			Product.all = new Map()
			
			if (!products) {
				return
			}
			
			$.each(products, function (i, product) {
				let detail = set(product)
				$index_table.insertRow(detail)
				Product.all.set("id", detail)
			})
		}
		
		const buildIndexTable = function () {
			
			$index_table = $(_product_index_table).table({
				table_type: "display_list",
				data: [],
				columnDefs: [
					{
						title: "Name",
						targets: 0,
						data: "name",
						render: function (data, type, row, meta) {
							return "<span style='white-space: nowrap;'>" + data + "</span>"
						},
					},
					{
						title: "SKU",
						targets: 1,
						data: "sku",
						render: function (data, type, row, meta) {
							return "<span style='white-space: nowrap;'>" + data + "</span>"
						},
					},
					{
						title: "Provider",
						targets: 2,
						data: "provider",
						render: function (data, type, row, meta) {
							return "<span style='white-space: nowrap;'>" + data.name + "</span>"
						},
					},
					{
						title: "Vendor",
						targets: 3,
						data: "vendor",
						render: function (data, type, row, meta) {
							return "<span style='white-space: nowrap;'>" + data.name + "</span>"
						},
					},
					{
						title: "Location",
						targets: 4,
						data: "location",
						render: function (data, type, row, meta) {
							let displayLocation = ""
							if (defaultLocationDisplayFormat === "short") {
								displayLocation = data.display_short
							} else if (defaultLocationDisplayFormat === "long") {
								displayLocation = data.display_long
							} else {
								displayLocation = data.display_medium
							}
							
							return "<span style='white-space: nowrap;'>" + displayLocation + "</span>"
						},
					},
					{
						title: "Category",
						targets: 5,
						data: "category",
						render: function (data, type, row, meta) {
							return "<span style='white-space: nowrap;'>" + data.name + "</span>"
						},
					},
				],
				rowClick: Product.navigate,
			})
		}
		
		const changeHandler = function (event) {
			if (this.value === "use_provider_location") {
				Location.init(provider_initial_location)
			} else if (this.value === "use_product_location") {
				Location.init(product_initial_location)
			}
		}
		
		const setDefaultProductDetails = function () {
			return {
				location: {},
				provider: {},
				vendor: {},
				seasons: [],
				units: [],
				variants: [],
				profiles: [],
				matrix: [],
			}
		}
		
		const setNewFormDetails = function (category_id) {
			console.log("setNewFormDetails()", category_id)
			
		}
		
		const updateProductSKU = function () {
			let att1 = Product.attr1
			let att2 = Product.attr2
			let att3 = Product.attr3
			let sku = ""
			if (!is_null(att1) && !is_null(att2) && !is_null(att3)) {
				sku = att1.replace(/-/g, "") + "-" + att2.replace(/-/g, "") + "-" + att3.replace(/-/g, "")
				_modal_product_sku.value = sku
			} else {
				_modal_product_sku.value = ""
				if (is_null(att1)) {
					//console.log("att1 is null", att1)
				}
				
				if (is_null(att2)) {
					//console.log("att2 is null", att2)
				}
				
				if (is_null(att3)) {
					//console.log("att3 is null", att3)
				}
			}
			
		}
		
		const handleProductError = function (msg) {
			toastr.error(msg)
		}
		
		const initEditForm = function (settings) {
			let product = setDefaultProductDetails()
			
			if (settings) {
				product = settings
			}
			
			Array.prototype.forEach.call(radios, function (radio) {
				radio.addEventListener("change", changeHandler)
			})
			
			setEditFormValues(product)
		}
		
		const setEditFormValues = function (product) {
			let provider, vendor, product_location,
				seasons, units, variants, profiles, provider_location
			
			if (product.location) {
				product_location = product.location
				Product.product_initial_location = product_location
			}
			
			if (product.provider) {
				provider = product.provider
			}
			
			if (provider.location) {
				provider_location = provider.location
				Product.provider_initial_location = provider_location
			}
			
			if (product.vendor) {
				vendor = product.vendor
			}
			
			if (product.seasons) {
				seasons = product.seasons
			}
			
			if (product.units) {
				units = product.units
			}
			
			if (product.variants) {
				variants = product.variants
			}
			
			if (product.profiles) {
				profiles = product.profiles
			}
			
			if (product.category_id === 1) {
				ProductLocation.init({
					product_location: product_location,
					product: product,
				})
			}
			
			let sku = (product.sku) ? product.sku : ""
			let name = (product.name) ? product.name : ""
			let ratings_type_id = (product.rating_types_id) ? product.rating_types_id : ""
			let enabled = (product.enabled && product.enabled === 1)
			let currency_types_id = (product.currency_id) ? product.currency_id : ""
			let description_long = (product.description_long) ? product.description_long : ""
			let description_short = (product.description_short) ? product.description_short : ""
			let product_keywords = (product.keywords) ? product.keywords : []
			let product_amenities = (product.amenities) ? product.amenities : []
			
			$product_keywords = $(_product_keywords).BuildKeyword(product_keywords)
			$product_amenities = $(_product_amenities).BuildKeyword(product_amenities)
			
			_product_edit_details_name.value = name
			_product_edit_details_sku.value = sku
			_product_edit_details_enabled.checked = enabled
			_product_edit_meta_description_short.value = description_short
			_product_edit_meta_description_long.value = description_long
			_product_edit_details_currency_id.value = currency_types_id
			_product_edit_details_rating_types_id.value = ratings_type_id
			
		}
		
		const index = function (settings) {
			if (_product_index_table) {
				buildIndexTable()
				
				if (settings) {
					loadAll(settings)
				}
			}
		}
		
		const init = function (settings) {
			let product_details, variants, seasons, units, profiles, matrices, pricings
			
			if (_modal_new_product) {
				Category.init()
				Airport.init()
				Station.init()
			}
			
			if (_product_edit_page) {
				if (settings) {
					
					if (settings.product_details) {
						product_details = settings.product_details
					}
					
					if (product_details.variants) {
						variants = product_details.variants
					}
					
					if (product_details.seasons) {
						seasons = product_details.seasons
					}
					
					if (product_details.matrices) {
						matrices = product_details.matrices
					}
					
					if (product_details.profiles) {
						profiles = product_details.profiles
					}
					
					if (product_details.units) {
						units = product_details.units
					}
					
					if (product_details.pricings) {
						pricings = product_details.pricings
					}
					
					let pricing_strategy = {
						pricing_strategy_types_id: (!isNaN(parseInt(product_details.pricing_strategy_types_id))) ? parseInt(product_details.pricing_strategy_types_id) : null,
					}
					
					$(document).ready(function () {
						let categoryId = (!isNaN(parseInt(_category_id.value))) ? parseInt(_category_id.value) : null
						
						if (_product_edit_page) {
							initAutoComplete()
							initEditForm(product_details)
							
							Variant.init(variants)
							Season.init(seasons)
							Season.loadAll(seasons)
							Unit.init({ units: units })
							Matrix.init({ matrices: matrices })
							Pricing.init({ pricings: pricings })
							InventoryProfile.init({
								profiles: profiles,
							})
							PricingWorksheet.init({
								pricing_strategy: pricing_strategy,
								pricings: pricings,
							})
							Product.calendar = $("#calendar").YearCalendar({
								displayEventTime: false,
								calendarType: "season",
								events: [],
							})
							
							let unitTabLabel = "Unit"
							let variantTabLabel = "Variant"
							
							if (categoryId === 2 || categoryId === 4) {
								unitTabLabel = "Seat"
								variantTabLabel = "Passenger"
							}
							
							//$(_panel_tab_unit).html(unitTabLabel)
							//$(_panel_tab_variant).html(variantTabLabel)
							
							$(_product_panel_link_overview)
								.on("click", function () {
									$(_panel_tab_product_o).tab("show")
								})
							$(_product_panel_link_location)
								.on("click", function () {
									$(_panel_tab_location).tab("show")
								})
							$(_product_panel_link_product)
								.on("click", function () {
									$(_panel_tab_product).tab("show")
								})
							$(_product_panel_link_season)
								.on("click", function () {
									$(_panel_tab_season).tab("show")
								})
							$(_product_panel_link_unit)
								.on("click", function () {
									$(_panel_tab_unit).tab("show")
								})
							$(_product_panel_link_variant)
								.on("click", function () {
									$(_panel_tab_variant).tab("show")
								})
							$(_product_panel_link_inventory)
								.on("click", function () {
									$(_panel_tab_inventory).tab("show")
								})
							$(_product_panel_link_pricing)
								.on("click", function () {
									$(_panel_tab_pricing).tab("show")
								})
							$(_product_panel_link_meta)
								.on("click", function () {
									$(_panel_tab_meta).tab("show")
								})
							
							updateProgress()
						}
					})
					
				}
				
				return true
			}
			
			if (_product_index_page) {
				Provider.init()
				Product.index(settings)
				
				if (_form_product_add) {
					$(document).ready(function () {
						
						if (_modal_product_depart_from_date) {
							Product.depart_from_date = $(_modal_product_depart_from_date).dateSelect({
								onStart: function () {},
							})
						}
						
						if (_modal_product_depart_from_time) {
							Product.depart_from_time = $(_modal_product_depart_from_time).timeSelect({
								onStart: function () {},
							})
						}
						
						if (_modal_product_arrive_to_date) {
							Product.arrive_to_date = $(_modal_product_arrive_to_date).dateSelect({
								onStart: function () {},
							})
						}
						
						if (_modal_product_arrive_to_time) {
							Product.arrive_to_time = $(_modal_product_arrive_to_time).timeSelect({
								onStart: function () {},
							})
						}
						
						if (_modal_product_arrive_to_station_date) {
							Product.depart_from_station_date = $(_modal_product_arrive_to_station_date).dateSelect({
								onStart: function () {},
							})
						}
						
						if (_modal_product_depart_from_station_date) {
							Product.depart_from_station_date = $(_modal_product_depart_from_station_date).dateSelect({
								onStart: function () {},
							})
						}
						
						if (_modal_product_arrive_to_station_time) {
							Product.arrive_to_station_time = $(_modal_product_arrive_to_station_time).timeSelect({
								onStart: function () {},
							})
						}
						
						if (_modal_product_depart_from_station_time) {
							Product.depart_from_station_time = $(_modal_product_depart_from_station_time).timeSelect({
								onStart: function () {},
							})
						}
						
						validator_init(add_modal_form_rules)
						newProduct_validator = $(_form_product_add).validate()
					})
				}
				
				return true
			}
		}
		
		return {
			validator: null,
			depart_from_date: null,
			depart_from_time: null,
			calendars: null,
			product_initial_location: null,
			provider_initial_location: null,
			arrive_to_station_time: null,
			depart_from_station_time: null,
			arrive_to_station_date: null,
			depart_from_station_date: null,
			detail: {},
			all: new Map(),
			attr1: null,
			attr2: null,
			attr3: null,
			updateProgress: function () {
				updateProgress()
				$("html").css({ overflow: "auto" })
			},
			updateProductSKU: function () {
				updateProductSKU()
			},
			setNewFormDetails: function (category_id) {
				setNewFormDetails(category_id)
			},
			get: function (params) {
				get(params)
			},
			loadAll: function (params) {
				loadAll(params)
			},
			save: function (params) {
				save(params)
			},
			init: function (settings) {
				init(settings)
			},
			index: function (settings) {
				index(settings)
			},
			navigate: function (product) {
				navigate(product)
			},
			resetNewProductDetails: function () {
				resetNewProductDetails()
			},
			initAutoComplete: function () {
				initAutoComplete()
			},
		}
		
	})()
</script>
<!-- /Product -->

<!-- ProductLocation -->
<script type="text/javascript">
	const ProductLocation = (function () {
		"use strict"
		
		const _product_edit_location_id = document.getElementById("product_edit_location_id")
		const _product_location_search = document.getElementById("product_location_search")
		const _product_edit_location_city_id = document.getElementById("product_edit_location_city_id")
		const _product_edit_location_city = document.getElementById("product_edit_location_city")
		const _product_edit_location_street_1 = document.getElementById("product_edit_location_street_1")
		const _product_edit_location_street_2 = document.getElementById("product_edit_location_street_2")
		const _product_edit_location_zipcode = document.getElementById("product_edit_location_zipcode")
		const _product_edit_location_location_types_id = document.getElementById("product_edit_location_location_types_id")
		const _product_edit_location_name = document.getElementById("product_edit_location_name")
		const _button_submit_form_product_edit_location = document.getElementById("button_submit_form_product_edit_location")
		const _button_clear_form_product_edit_location = document.getElementById("button_clear_form_product_edit_location")
		const _product_edit_location_city_edit = document.getElementById("product_edit_location_city_edit")
		const _location_country_id = document.getElementById("location_country_id")
		const _location_province_id = document.getElementById("location_province_id")
		const _location_city_id = document.getElementById("location_city_id")
		const _product_edit_location_form = document.getElementById("product_edit_location_form")
		
		const _product_id = document.getElementById("product_id")
		const _category_id = document.getElementById("category_id")
		
		let form_rules = {
			group: {
				product_edit_location_city: "edit_location_country_id location_province_id location_city_id",
			},
			rules: {
				product_edit_location_city: {
					required: true,
				},
				product_edit_location_name: {
					required: true,
				},
				product_edit_location_location_types_id: {
					required: true,
				},
			},
			messages: {
				product_edit_location_city: {
					required: "Field Required",
				},
				product_edit_location_name: {
					required: "Field Required",
				},
				product_edit_location_location_types_id: {
					required: "Field Required",
				},
			},
		}
		
		let user_id = (document.getElementById("user_id")) ? (!isNaN(parseInt(document.getElementById("user_id").value))) ? parseInt(document.getElementById("user_id").value) : 4 : 4
		
		$(_button_submit_form_product_edit_location)
			.on("click", function () {
				save()
			})
		
		$(_button_clear_form_product_edit_location)
			.on("click", function () {
				resetForm()
			})
		
		$(_product_edit_location_zipcode)
			.on("change", function () {
				ProductLocation.detail.zipcode = (_product_edit_location_zipcode.value !== "") ? _product_edit_location_zipcode.value : null
				renderMap()
			})
		$(_product_edit_location_name)
			.on("click", function () {
				ProductLocation.detail.name = (_product_edit_location_name.value !== "") ? _product_edit_location_name.value : null
				renderMap()
			})
		
		$(_location_country_id)
			.on("change", function () {
				let country_id = (!isNaN(parseInt(_location_country_id.value))) ? parseInt(_location_country_id.value) : null
				
				if (country_id !== null) {
					let country = Country.all.get(country_id)
					ProductLocation.detail.country_id = country_id
					ProductLocation.detail.country = country
				}
			})
		
		$(_location_province_id)
			.on("change", function () {
				let province_id = (!isNaN(parseInt(_location_province_id.value))) ? parseInt(_location_province_id.value) : null
				
				if (province_id !== null) {
					let province = Province.all.get(province_id)
					ProductLocation.detail.province_id = province_id
					ProductLocation.detail.province = province
				}
			})
		
		$(_location_city_id)
			.on("change", function () {
				let city_id = (!isNaN(parseInt(_location_city_id.value))) ? parseInt(_location_city_id.value) : null
				
				if (city_id !== null) {
					let city = City.all.get(city_id)
					ProductLocation.detail.city_id = city_id
					ProductLocation.detail.city = city
					renderMap()
				}
			})
		
		$(_product_edit_location_name)
			.on("change", function () {
				ProductLocation.detail.name = (_product_edit_location_name.value !== "") ? _product_edit_location_name.value : null
				renderMap()
			})
		
		$(_product_edit_location_street_1)
			.on("change", function () {
				ProductLocation.detail.street_1 = (_product_edit_location_street_1.value !== "") ? _product_edit_location_street_1.value : null
				renderMap()
			})
		
		$(_product_edit_location_street_2)
			.on("change", function () {
				ProductLocation.detail.street_2 = (_product_edit_location_street_2.value !== "") ? _product_edit_location_street_2.value : null
				renderMap()
			})
		
		$(_location_city_id)
			.on("change", function () {
				let cityLine = ""
				let country_id = (!isNaN(parseInt(_location_country_id.value))) ? parseInt(_location_country_id.value) : null
				let province_id = (!isNaN(parseInt(_location_province_id.value))) ? parseInt(_location_province_id.value) : null
				let city_id = (!isNaN(parseInt(_location_city_id.value))) ? parseInt(_location_city_id.value) : null
				let country = Country.all.get(country_id)
				let province = Province.all.get(province_id)
				let city = City.all.get(city_id)
				
				ProductLocation.detail.country = country
				ProductLocation.detail.country_id = country_id
				
				ProductLocation.detail.province = province
				ProductLocation.detail.province_id = province_id
				
				ProductLocation.detail.city = city
				ProductLocation.detail.city_id = city_id
				
				if (country && province && city) {
					let cityName = city.name
					let provinceName = province.name
					let countryName = country.name
					_product_edit_location_city_id.value = city.id
					cityLine = `${cityName} (${provinceName}, ${countryName})`
				} else {
					cityLine = ``
					_product_edit_location_city_id.value = ``
				}
				
				_product_edit_location_city.value = cityLine
			})
		
		const initAutoComplete = function () {
			
			$(_product_edit_location_city)
				.on("change", function () {
					setTimeout(function () {
						let cityName = _product_edit_location_city.value
						if (cityName === "") {
							resetCityForm()
						}
					}, 200)
				})
				.on("search", function () {
					resetCityForm()
				})
				.on("click", function (e) {
					if ($(this).attr("readonly") === "readonly") {
						e.preventDefault()
					} else {
						$(this).select()
					}
					
				})
				.autocomplete({
					serviceUrl: "/api/v1.0/autocomplete/cities",
					minChars: 2,
					cache: false,
					dataType: "json",
					triggerSelectOnValidInput: false,
					paramName: "st",
					onSelect: function (suggestion) {
						if (!suggestion.data) {
							return
						}
						let country, province, city, city_name, country_name, province_name = null
						
						let product_location = suggestion.data
						
						let detail = set(product_location)
						
						if (product_location.country) {
							country = product_location.country
							Country.set_detail(country)
							Country.id = (country.id) ? country.id.toString() : null
						}
						
						if (product_location.province) {
							province = product_location.province
							Province.set_detail(province)
							province_name = province.name
							Province.id = (province.id) ? province.id.toString() : null
						}
						
						if (product_location.city) {
							city = product_location.city
							city_name = city.name
							City.set_detail(city)
							City.id = (city.id) ? city.id.toString() : null
						}
						
						$(_location_country_id).val((product_location.city.country_id) ? product_location.city.country_id : "").trigger("change")
						
						_product_location_search.value = `City Center (${city_name}, ${province_name})`
						
						let name = (_product_edit_location_name && _product_edit_location_name.value !== "") ? _product_edit_location_name.value : null
						let zipcode = (_product_edit_location_zipcode && _product_edit_location_zipcode.value !== "") ? _product_edit_location_zipcode.value : null
						let street_1 = (_product_edit_location_street_1 && _product_edit_location_street_1.value !== "") ? _product_edit_location_street_1.value : null
						let street_2 = (_product_edit_location_street_2 && _product_edit_location_street_2.value !== "") ? _product_edit_location_street_2.value : null
						
						product_location.name = name
						product_location.street_1 = street_1
						product_location.street_2 = street_2
						product_location.zipcode = zipcode
						
						//renderMap()
					},
				})
		}
		
		const showCityForm = function () {
			if (_product_edit_location_city_edit) {
				$(_product_edit_location_city_edit).show()
			}
		}
		
		const hideCityForm = function () {
			if (_product_edit_location_city_edit) {
				//$(_product_edit_location_city_edit).hide()
			}
		}
		
		const resetCityForm = function () {
			_product_edit_location_zipcode.value = ""
			_product_edit_location_city_id.value = ""
			
			$(_location_country_id)
				.val("")
				.trigger("change")
			
			hideCityForm()
		}
		
		const resetForm = function () {
			_product_edit_location_street_1.value = ""
			_product_edit_location_street_2.value = ""
			_product_edit_location_zipcode.value = ""
			_product_edit_location_city.value = ""
			_product_edit_location_name.value = ""
			_product_edit_location_location_types_id.value = ""
			
			resetCityForm()
		}
		
		const renderMap = function () {
			console.log("ProductLocation.detail", ProductLocation.detail)
			
			let url = buildMapsURL(ProductLocation.detail)
			console.log("url", url)
			let elementWidth, elementHeight = null
			let _locationMap = document.getElementById("locationMap")
			
			if (_locationMap) {
				$(_locationMap)
					.empty()
					.append(
						$("<iframe/>", {
							id: "locationMapContainer",
							allowfullscreen: "allowfullscreen",
							frameborder: "0",
							src: url,
						}),
					)
				
				elementWidth = (!isNaN(parseInt($(_locationMap).actual("width")))) ? parseInt($(_locationMap).actual("width")) : null
				
				if (elementWidth) {
					elementHeight = elementWidth / 2
					
					$("#locationMapContainer")
						.css({
							"height": elementHeight + "px",
							"width": elementWidth + "px",
						})
				}
			}
			
		}
		
		const defaultDetail = function () {
			return {
				id: null,
				city_id: null,
				location_types_id: null,
				name: null,
				street_1: null,
				street_2: null,
				zipcode: null,
				enabled: 1,
				date_created: formatDateMySQL(),
				created_by: user_id,
				date_modified: formatDateMySQL(),
				modified_by: user_id,
				note: null,
				display_long: null,
				display_medium: null,
				display_short: null,
				country: {},
				province: {},
				city: {},
				type: [],
			}
		}
		
		const set = function (productLocation) {
			console.log("ProductLocation.set(productLocation) - productLocation ", productLocation)
			let detail = defaultDetail()
			
			if (productLocation) {
				let cityData = productLocation.city
				let provinceData = productLocation.province
				let countryData = productLocation.country
				
				detail["country"] = countryData
				detail["province"] = provinceData
				detail["city"] = cityData
				detail["display_long"] = (productLocation.display_long) ? productLocation.display_long : null
				detail["display_medium"] = (productLocation.display_medium) ? productLocation.display_medium : null
				detail["display_short"] = (productLocation.display_short) ? productLocation.display_short : null
				detail["enabled"] = (productLocation.enabled) ? productLocation.enabled : 1
				detail["id"] = (productLocation.id) ? productLocation.id : null
				detail["name"] = (productLocation.name) ? productLocation.name : null
				detail["postal_code"] = (productLocation.postal_code) ? productLocation.postal_code : null
				detail["province"] = (productLocation.province) ? productLocation.province : []
				detail["street_1"] = productLocation.street_1
				detail["street_2"] = (productLocation.street_2) ? productLocation.street_2 : null
				detail["type"] = (productLocation.type) ? productLocation.type : []
				detail["zipcode"] = (productLocation.zipcode) ? productLocation.zipcode : null
				detail["location_types_id"] = (productLocation.location_types_id) ? productLocation.location_types_id : null
				detail["type"] = (productLocation.type) ? productLocation.type : {}
				detail["city_id"] = productLocation.city.id
				detail["province"].id = (productLocation.province.id) ? productLocation.province.id : null
				detail["country"].id = (productLocation.country.id) ? productLocation.country.id : null
			}
			
			ProductLocation.detail = detail
			
			return detail
		}
		
		const populateForm = function (product_location) {
			if (!_product_edit_location_form) {
				return
			}
			
			resetForm()
			
			if (product_location) {
				let detail = product_location
				let country, province, city = {}
				
				ProductLocation.detail = product_location
				ProductLocation.display_long = product_location.display_long //"City Center (Houston TX - Texas, US - United States)"
				ProductLocation.display_medium = product_location.display_medium // "City Center (Houston, Texas)"
				ProductLocation.display_short = product_location.display_short //"City Center (Houston TX, US)"
				
				let citySearchDisplay = ""
				let location_name = (product_location.name) ? product_location.name : null
				let location_id = (!isNaN(parseInt(product_location.id))) ? parseInt(product_location.id) : null
				let postal_code = (product_location.postal_code) ? product_location.postal_code : ""
				let street_1 = (product_location.street_1) ? product_location.street_1 : ""
				let street_2 = (product_location.street_2) ? product_location.street_2 : ""
				
				_product_edit_location_id.value = location_id
				_product_edit_location_street_1.value = street_1
				_product_edit_location_street_2.value = street_2
				_product_edit_location_zipcode.value = postal_code
				_product_edit_location_city.value = ""
				_product_edit_location_name.value = location_name
				
				$(_product_edit_location_location_types_id).val(product_location.type.id.toString())
				
				if (product_location.country) {
					country = product_location.country
					Country.set_detail(country)
					Country.id = (country.id) ? country.id.toString() : null
				}
				
				if (product_location.province) {
					province = product_location.province
					Province.set_detail(province)
					Province.id = (province.id) ? province.id.toString() : null
				}
				
				if (product_location.city) {
					city = product_location.city
					City.set_detail(city)
					City.id = (city.id) ? city.id.toString() : null
				}
				
				ProductLocation.detail.name = (product_location.name) ? product_location.name : null
				
				citySearchDisplay = city.name + " (" + province.name + ", " + country.name + ")"
				_product_edit_location_city.value = citySearchDisplay
				
				$(_location_country_id)
					.val((country.id) ? country.id : "")
					.trigger("change")
				
				renderMap()
			}
			
		}
		
		const valid = function () {
			return $(_product_edit_location_form).valid()
		}
		
		const buildLocationObject = function () {
			if (valid()) {
				let id, city_id, location_types_id, name, street_1, street_2,
					zipcode, enabled, note
				
				name = (_product_edit_location_name.value !== "") ? _product_edit_location_name.value : null
				street_1 = (_product_edit_location_street_1.value !== "") ? _product_edit_location_street_1.value : null
				street_2 = (_product_edit_location_street_2.value !== "") ? _product_edit_location_street_2.value : null
				city_id = (!isNaN(parseInt(_location_city_id.value))) ? parseInt(_location_city_id.value) : null
				zipcode = (_product_edit_location_zipcode.value !== "") ? _product_edit_location_zipcode.value : null
				id = (!isNaN(parseInt(_product_edit_location_id.value))) ? parseInt(_product_edit_location_id.value) : null
				location_types_id = (!isNaN(parseInt(_product_edit_location_location_types_id.value))) ? parseInt(_product_edit_location_location_types_id.value) : null
				
				let productLocation = {
					product_id: (!isNaN(parseInt(_product_id.value))) ? parseInt(_product_id.value) : null,
					category_id: (!isNaN(parseInt(_category_id.value))) ? parseInt(_category_id.value) : null,
					id: id,
					city_id: city_id,
					location_types_id: location_types_id,
					name: name,
					street_1: street_1,
					street_2: street_2,
					zipcode: zipcode,
					enabled: 1,
					note: null,
				}
				
				return removeNulls(productLocation)
			}
		}
		
		const sendUpdateRequest = function (dataToSend, callback) {
			let url = "/api/v1.0/locations/update"
			
			try {
				sendPostRequest(url, dataToSend, function (data, status, xhr) {
					if (data) {
						return callback(data)
					}
				})
			} catch (e) {
				console.log("error", e)
				handleProductLocationError("Error Updating Location")
			}
		}
		
		const handleProductLocationError = function (msg) {
		
		}
		
		const save = function () {
			let productLocation = buildLocationObject()
			
			if (productLocation) {
				confirmDialog(`Would you like to update?`, (ans) => {
					if (ans) {
						sendUpdateRequest(productLocation, function (data) {
							let location
							if (data) {
								location = data
								if (data[0]) {
									location = data[0]
								}
							}
							
							if (location) {
								toastr["success"](`Location ${location.id} has been updated`, "Location Updated")
							}
						})
					}
				})
			}
		}
		
		const init = function (settings) {
			console.log("ProductLocation.init(settings) - settings ", settings)
			let location
			
			if (settings) {
				if (settings.product_location) {
					console.log("settings.product_location", settings.product_location)
					location = settings.product_location
					console.log("location", location)
					let detail = set(location)
					let name = (location.name) ? location.name : null
					
					console.log("detail", detail)
					
					if (_product_edit_location_form) {
						validator_init(form_rules)
						ProductLocation.validator = $(_product_edit_location_form).validate()
						
						$(_location_country_id).BuildDropDown({
							data: Array.from(Country.all.values()),
							title: "Country",
							id_field: "id",
							text_field: "name",
							first_selectable: false,
						})
						
						$(_location_province_id).BuildDropDown({
							data: Array.from(Province.all.values()),
							title: "Province",
							id_field: "id",
							text_field: "name",
							first_selectable: false,
						})
						
						$(_location_city_id).BuildDropDown({
							data: Array.from(City.all.values()),
							title: "City",
							id_field: "id",
							text_field: "name",
							first_selectable: false,
						})
						
						Country.init({
							dropdowns: [
								"location_country_id",
							],
						})
						
						Province.init({
							dropdowns: [
								"location_province_id",
							],
						})
						
						City.init({
							dropdowns: [
								"location_city_id",
							],
						})
						
						initAutoComplete()
						
						populateForm(location)
					}
				}
			}
		}
		
		return {
			validator: null,
			detail: {
				id: null,
				city_id: null,
				location_types_id: null,
				name: null,
				street_1: null,
				street_2: null,
				zipcode: null,
				enabled: 1,
				date_created: formatDateMySQL(),
				created_by: user_id,
				date_modified: formatDateMySQL(),
				modified_by: user_id,
				note: null,
				display_long: null,
				display_medium: null,
				display_short: null,
				country: [],
				province: [],
				city: [],
				type: [],
			},
			display_long: null,
			display_medium: null,
			display_short: null,
			init: function (settings) {
				$(document).ready(function () {
					init(settings)
				})
			},
		}
	})()

</script>
<!-- /ProductLocation -->

<!-- Station -->
<script type="text/javascript">
	const Station = (function () {
		"use strict"
		const _modal_product_depart_from_station_cancel_button = document.getElementById("modal_product_depart_from_station_cancel_button")
		const _modal_product_depart_from_station_submit_button = document.getElementById("modal_product_depart_from_station_submit_button")
		const _modal_product_depart_from_station_iata_code = document.getElementById("modal_product_depart_from_station_iata_code")
		const _modal_product_depart_from_station_country_id = document.getElementById("modal_product_depart_from_station_country_id")
		const _modal_product_depart_from_station_province_id = document.getElementById("modal_product_depart_from_station_province_id")
		const _modal_product_depart_from_station_city_id = document.getElementById("modal_product_depart_from_station_city_id")
		const _modal_product_depart_from_station_city = document.getElementById("modal_product_depart_from_station_city")
		const _modal_product_depart_from_station = document.getElementById("modal_product_depart_from_station")
		const _modal_product_depart_from_station_id = document.getElementById("modal_product_depart_from_station_id")
		const _modal_product_depart_from_station_add_block = document.getElementById("modal_product_depart_from_station_add_block")
		
		const _modal_product_depart_from_new_station_id = document.getElementById("modal_product_depart_from_new_station_id")
		const _modal_product_city_id = document.getElementById("modal_product_city_id")
		const _modal_product_arrive_to_station_cancel_button = document.getElementById("modal_product_arrive_to_station_cancel_button")
		const _modal_product_arrive_to_new_station_id = document.getElementById("modal_product_arrive_to_new_station_id")
		const _modal_product_arrive_to_station_submit_button = document.getElementById("modal_product_arrive_to_station_submit_button")
		const _modal_product_arrive_to_station_iata_code = document.getElementById("modal_product_arrive_to_station_iata_code")
		const _modal_product_arrive_to_station_country_id = document.getElementById("modal_product_arrive_to_station_country_id")
		const _modal_product_arrive_to_station_province_id = document.getElementById("modal_product_arrive_to_station_province_id")
		const _modal_product_arrive_to_station_city_id = document.getElementById("modal_product_arrive_to_station_city_id")
		const _modal_product_arrive_to_station_city = document.getElementById("modal_product_arrive_to_station_city")
		const _modal_product_arrive_to_station = document.getElementById("modal_product_arrive_to_station")
		const _modal_product_arrive_to_station_id = document.getElementById("modal_product_arrive_to_station_id")
		const _modal_product_arrive_to_station_add_block = document.getElementById("modal_product_arrive_to_station_add_block")
		
		let user_id = (document.getElementById("user_id")) ? (!isNaN(parseInt(document.getElementById("user_id").value))) ? parseInt(document.getElementById("user_id").value) : 4 : 4
		let globalSelectedStationDepartFrom = false
		let globalSelectedStationArriveTo = false
		
		$(_modal_product_depart_from_station_add_block)
			.on("change", function () {
				validDepartFromRecord()
			})
			.on("keyup", function () {
				validDepartFromRecord()
			})
		
		$(_modal_product_depart_from_station_cancel_button)
			.on("click", function () {
				cancelAddStationRecord("depart_from")
			})
		
		$(_modal_product_arrive_to_station_cancel_button)
			.on("click", function () {
				cancelAddStationRecord("arrive_to")
			})
		
		$(_modal_product_depart_from_station_submit_button)
			.on("click", function () {
				save("depart_from")
			})
		
		$(_modal_product_arrive_to_station_submit_button)
			.on("click", function () {
				save("arrive_to")
			})
		
		const save = function (type) {
			if (type) {
				let dataToSend = buildAddStationRecord(type)
				
				if (dataToSend) {
					confirmDialog(`Would you like to update?`, (ans) => {
						if (ans) {
							sendSaveRequest(dataToSend, function (data) {
								let station
								if (data) {
									station = data
									if (data[0]) {
										station = data[0]
									}
								}
								
								if (station) {
									if (type === "depart_from") {
										if (_modal_product_depart_from_station) {
											_modal_product_depart_from_station.value = (station.name) ? station.name : ""
										}
										
										if (_modal_product_depart_from_new_station_id) {
											_modal_product_depart_from_new_station_id.value = (!isNaN(parseInt(station.id))) ? parseInt(station.id) : ""
										}
										
										if (_modal_product_depart_from_station_id) {
											_modal_product_depart_from_station_id.value = (!isNaN(parseInt(station.id))) ? parseInt(station.id) : ""
										}
										
										if (_modal_product_city_id) {
											_modal_product_city_id.value = (!isNaN(parseInt(station.city.id))) ? parseInt(station.city.id) : ""
										}
									}
									
									if (type === "arrive_to") {
										if (_modal_product_arrive_to_new_station_id) {
											_modal_product_arrive_to_new_station_id.value = (!isNaN(parseInt(station.id))) ? parseInt(station.id) : ""
										}
										
										if (_modal_product_arrive_to_station) {
											_modal_product_arrive_to_station.value = (station.name) ? station.name : ""
										}
										
										if (_modal_product_arrive_to_station_id) {
											_modal_product_arrive_to_station_id.value = (!isNaN(parseInt(station.id))) ? parseInt(station.id) : ""
										}
									}
									
									resetStationForm(type)
									initAutocomplete()
								}
							})
						}
					})
				}
			}
		}
		
		const sendSaveRequest = function (dataToSend, callback) {
			if (dataToSend) {
				let url = "/api/v1.0/stations/update"
				try {
					sendPostRequest(url, dataToSend, function (data, status, xhr) {
						if (data) {
							return callback(data)
						} else {
							handleStationError("Oops: 1")
						}
					})
				} catch (e) {
					console.log("error", e)
				}
			}
		}
		
		const validDepartFromRecord = function () {
			let isValid = true
			
			if (_modal_product_depart_from_station_iata_code.value === "") {
				$(_modal_product_depart_from_station_iata_code).showError("Field Required")
				isValid = false
			} else {
				$(_modal_product_depart_from_station_iata_code).hideError()
			}
			
			if (isNaN(parseInt(_modal_product_depart_from_station_city_id.value))) {
				$(_modal_product_depart_from_station_city).showError("Field Required")
				isValid = false
			} else {
				$(_modal_product_depart_from_station_city).hideError()
			}
			
			return isValid
		}
		
		const validArriveToRecord = function () {
			let isValid = true
			
			if (_modal_product_arrive_to_station_iata_code.value === "") {
				$(_modal_product_arrive_to_station_iata_code).showError("Field Required")
				isValid = false
			} else {
				$(_modal_product_arrive_to_station_iata_code).hideError()
			}
			
			if (isNaN(parseInt(_modal_product_arrive_to_station_city_id.value))) {
				$(_modal_product_arrive_to_station_city).showError("Field Required")
				isValid = false
			} else {
				$(_modal_product_arrive_to_station_city).hideError()
			}
			
			return isValid
		}
		
		const buildAddStationRecord = function (type) {
			if (_modal_product_depart_from_station_add_block && _modal_product_arrive_to_station_add_block) {
				if (type) {
					if (type === "depart_from") {
						if (validDepartFromRecord()) {
							let dataToSend = {
								city_id: (!isNaN(parseInt(_modal_product_depart_from_station_city_id.value))) ? parseInt(_modal_product_depart_from_station_city_id.value) : null,
								name: (_modal_product_depart_from_station.value !== "") ? _modal_product_depart_from_station.value : null,
								iata_code: (_modal_product_depart_from_station_iata_code.value !== "") ? _modal_product_depart_from_station_iata_code.value : null,
							}
							
							return removeNulls(dataToSend)
						}
					} else if (type === "arrive_to") {
						if (validArriveToRecord()) {
							let dataToSend = {
								city_id: (!isNaN(parseInt(_modal_product_arrive_to_station_city_id.value))) ? parseInt(_modal_product_arrive_to_station_city_id.value) : null,
								name: (_modal_product_arrive_to_station.value !== "") ? _modal_product_arrive_to_station.value : null,
								iata_code: (_modal_product_arrive_to_station_iata_code.value !== "") ? _modal_product_arrive_to_station_iata_code.value : null,
							}
							
							return removeNulls(dataToSend)
						}
					}
				}
			}
		}
		
		const cancelAddStationRecord = function (type) {
			if (_modal_product_depart_from_station_add_block && _modal_product_arrive_to_station_add_block) {
				clearStationForm(type)
				hideStationForm(type)
				
				if (type) {
					if (type === "depart_from") {
					
					} else if (type === "arrive_to") {
					
					}
				}
			}
		}
		
		const populateStationForm = function (station, type) {
			if (_modal_product_depart_from_station_add_block && _modal_product_arrive_to_station_add_block) {
				clearStationForm(type)
				
				showStationForm(type)
			}
		}
		
		const clearStationForm = function (type) {
			if (_modal_product_depart_from_station_add_block && _modal_product_arrive_to_station_add_block) {
				if (type) {
					if (type === "depart_from") {
						_modal_product_depart_from_station_iata_code.value = ""
						_modal_product_depart_from_station_city.value = ""
						_modal_product_depart_from_station_city_id.value = ""
						_modal_product_depart_from_station_country_id.value = ""
						_modal_product_depart_from_station_province_id.value = ""
						_modal_product_depart_from_station_city_id.value = ""
						_modal_product_depart_from_station.disabled = false
						clearAllValidation()
					} else if (type === "arrive_to") {
						_modal_product_arrive_to_station_iata_code.value = ""
						_modal_product_arrive_to_station_city.value = ""
						_modal_product_arrive_to_station_city_id.value = ""
						_modal_product_arrive_to_station_country_id.value = ""
						_modal_product_arrive_to_station_province_id.value = ""
						_modal_product_arrive_to_station_city_id.value = ""
						_modal_product_arrive_to_station.disabled = false
						clearAllValidation()
					}
				}
			}
		}
		
		const resetStationForm = function (type) {
			if (_modal_product_depart_from_station_add_block && _modal_product_arrive_to_station_add_block) {
				if (type) {
					_modal_product_arrive_to_station.disabled = false
					_modal_product_depart_from_station.disabled = false
					
					clearStationForm(type)
					
					hideStationForm("depart_from")
					hideStationForm("arrive_to")
				}
			}
		}
		
		const hideStationForm = function (type) {
			if (_modal_product_depart_from_station_add_block && _modal_product_arrive_to_station_add_block) {
				if (type) {
					if (type === "depart_from") {
						$(_modal_product_depart_from_station_add_block).hide()
					} else if (type === "arrive_to") {
						$(_modal_product_arrive_to_station_add_block).hide()
					}
				}
			}
		}
		
		const showStationForm = function (type) {
			if (_modal_product_depart_from_station_add_block && _modal_product_arrive_to_station_add_block) {
				if (type) {
					if (type === "depart_from") {
						_modal_product_depart_from_station.disabled = true
						$(_modal_product_depart_from_station_add_block).show()
						$(_modal_product_arrive_to_station_add_block).hide()
					} else if (type === "arrive_to") {
						_modal_product_arrive_to_station.disabled = true
						$(_modal_product_arrive_to_station_add_block).show()
						$(_modal_product_depart_from_station_add_block).hide()
					}
				}
			}
		}
		
		const initAutocomplete = function () {
			
			if (_modal_product_depart_from_station) {
				
				$(_modal_product_depart_from_station)
					.on("click", function () {
						if ($(this).attr("readonly") === "readonly") {
							e.preventDefault()
						} else {
							$(this).select()
						}
					})
					.on("search", function () {
						if (_modal_product_depart_from_station_id) {
							_modal_product_depart_from_station_id.value = ""
						}
						if (_modal_product_depart_from_station) {
							_modal_product_depart_from_station.value = ""
						}
					})
					.on("keyup", function () {
						globalSelectedStationDepartFrom = false
					})
					.on("change", function () {
						setTimeout(function () {
							let station_name = _modal_product_depart_from_station.value
							
							if (globalSelectedStationDepartFrom === false) {
								if (station_name === "") {
									_modal_product_depart_from_station.value = ""
									_modal_product_depart_from_station_id.value = ""
									globalSelectedStationDepartFrom = false
								} else {
									stationExists(station_name, "depart_from")
								}
							}
						}, 200)
					})
					.autocomplete({
						serviceUrl: "/api/v1.0/autocomplete/stations",
						minChars: 2,
						cache: false,
						dataType: "json",
						triggerSelectOnValidInput: false,
						paramName: "st",
						onSelect: function (suggestion) {
							if (!suggestion || !suggestion.data) {
								return
							}
							
							globalSelectedStationDepartFrom = true
							
							let station = suggestion.data
							
							if (station) {
								if (_modal_product_depart_from_station) {
									_modal_product_depart_from_station.value = (station.name) ? station.name : ""
								}
								
								if (_modal_product_depart_from_station_id) {
									_modal_product_depart_from_station_id.value = (!isNaN(parseInt(station.id))) ? parseInt(station.id) : ""
								}
								
								if (_modal_product_city_id) {
									_modal_product_city_id.value = (!isNaN(parseInt(station.city.id))) ? parseInt(station.city.id) : ""
								}
								
							} else {
								resetStationForm("depart_from")
								showStationForm("depart_from")
							}
						},
					})
			}
			
			if (_modal_product_arrive_to_station) {
				
				$(_modal_product_arrive_to_station)
					.on("click", function () {
						if ($(this).attr("readonly") === "readonly") {
							e.preventDefault()
						} else {
							$(this).select()
						}
					})
					.on("keyup", function () {
						globalSelectedStationArriveTo = false
					})
					.on("search", function () {
						if (_modal_product_arrive_to_station_id) {
							_modal_product_arrive_to_station_id.value = ""
						}
						if (_modal_product_arrive_to_station) {
							_modal_product_arrive_to_station.value = ""
						}
					})
					.on("change", function () {
						setTimeout(function () {
							let station_name = _modal_product_arrive_to_station.value
							
							if (globalSelectedStationArriveTo === false) {
								if (station_name === "") {
									_modal_product_arrive_to_station.value = ""
									_modal_product_arrive_to_station_id.value = ""
									globalSelectedStationArriveTo = false
								} else {
									stationExists(station_name, "arrive_to")
								}
							}
						}, 200)
					})
					.autocomplete({
						serviceUrl: "/api/v1.0/autocomplete/stations",
						minChars: 2,
						cache: false,
						dataType: "json",
						triggerSelectOnValidInput: false,
						paramName: "st",
						onSelect: function (suggestion) {
							if (!suggestion || !suggestion.data) {
								return
							}
							
							globalSelectedStationArriveTo = true
							
							let station = suggestion.data
							
							if (station) {
								if (_modal_product_arrive_to_station) {
									_modal_product_arrive_to_station.value = (station.name) ? station.name : ""
								}
								
								if (_modal_product_arrive_to_station_id) {
									_modal_product_arrive_to_station_id.value = (!isNaN(parseInt(station.id))) ? parseInt(station.id) : ""
								}
								
							} else {
								resetStationForm("arrive_to")
								showStationForm("arrive_to")
							}
						},
					})
			}
			
		}
		
		const stationExists = function (name, type) {
			if (name && name !== "") {
				/**
				 * data to send to the server
				 *
				 * @type {{name}}
				 */
				let dataToSend = {
					name: name,
				}
				
				fetchByName(dataToSend, function (data) {
					let station = null
					
					if (data) {
						station = data
						if (data[0]) {
							station = data[0]
						}
					}
					
					if (station && station.id) {
						if (type === "depart_from") {
							globalSelectedStationDepartFrom = true
							_modal_product_depart_from_station.value = station.name
							_modal_product_depart_from_station_id.value = station.id
							_modal_product_city_id.value = station.city.id
						} else {
							globalSelectedStationArriveTo = true
							_modal_product_arrive_to_station.value = station.name
							_modal_product_arrive_to_station_id.value = station.id
						}
					} else {
						confirmDialog(`The station: ${name} does not exist exists. Would you like to create it?`, (ans) => {
							if (ans) {
								if (type === "depart_from") {
									globalSelectedStationDepartFrom = false
								} else {
									globalSelectedStationArriveTo = false
								}
								
								populateStationForm({
									name: name,
								}, type)
								
							} else {
								if (type === "depart_from") {
									if (_modal_product_city_id) {
										_modal_product_city_id.value = ""
									}
									
									if (_modal_product_depart_from_station_id) {
										_modal_product_depart_from_station_id.value = ""
									}
									if (_modal_product_depart_from_station) {
										_modal_product_depart_from_station.value = ""
									}
								} else {
									if (_modal_product_arrive_to_station_id) {
										_modal_product_arrive_to_station_id.value = ""
									}
									if (_modal_product_arrive_to_station) {
										_modal_product_arrive_to_station.value = ""
									}
								}
								
							}
						})
					}
				})
			}
		}
		
		const fetchByName = function (dataToSend, callback) {
			let url = "/api/v1.0/stations/validate"
			
			if (dataToSend) {
				try {
					sendGetRequest(url, dataToSend, function (data, status, xhr) {
						if (data) {
							return callback(data)
						} else {
							handleStationError("Oops: 1")
						}
					})
				} catch (e) {
					console.log("error", e)
					handleStationError("Error Validating Station")
				}
			} else {
				handleStationError("Error Loading Station - Missing Data")
			}
		}
		
		const handleStationError = function (msg) {
			toastr.error(msg)
		}
		
		const init = function (settings) {
			if (_modal_product_depart_from_station || _modal_product_arrive_to_station) {
				initAutocomplete()
				resetStationForm("depart_from")
				resetStationForm("arrive_to")
			}
		}
		
		return {
			resetStationForm: function (type) {
				resetStationForm(type)
			},
			init: function (settings) {
				init(settings)
			},
		}
	})()
</script>
<!-- /Station -->

<!-- Airport -->
<script type="text/javascript">
	const Airport = (function () {
		"use strict"
		const _modal_product_depart_from_airport_cancel_button = document.getElementById("modal_product_depart_from_airport_cancel_button")
		const _modal_product_depart_from_airport_submit_button = document.getElementById("modal_product_depart_from_airport_submit_button")
		const _modal_product_depart_from_airport_iata_code = document.getElementById("modal_product_depart_from_airport_iata_code")
		const _modal_product_depart_from_airport_country_id = document.getElementById("modal_product_depart_from_airport_country_id")
		const _modal_product_depart_from_airport_province_id = document.getElementById("modal_product_depart_from_airport_province_id")
		const _modal_product_depart_from_airport_city_id = document.getElementById("modal_product_depart_from_airport_city_id")
		const _modal_product_depart_from_airport_city = document.getElementById("modal_product_depart_from_airport_city")
		const _modal_product_depart_from_airport = document.getElementById("modal_product_depart_from_airport")
		const _modal_product_depart_from_airport_id = document.getElementById("modal_product_depart_from_airport_id")
		const _modal_product_depart_from_airport_add_block = document.getElementById("modal_product_depart_from_airport_add_block")
		const _modal_product_depart_from_airport_types_id = document.getElementById("modal_product_depart_from_airport_types_id")
		const _modal_product_depart_from_new_airport_id = document.getElementById("modal_product_depart_from_new_airport_id")
		const _modal_product_city_id = document.getElementById("modal_product_city_id")
		const _modal_product_arrive_to_airport_cancel_button = document.getElementById("modal_product_arrive_to_airport_cancel_button")
		const _modal_product_arrive_to_new_airport_id = document.getElementById("modal_product_arrive_to_new_airport_id")
		const _modal_product_arrive_to_airport_submit_button = document.getElementById("modal_product_arrive_to_airport_submit_button")
		const _modal_product_arrive_to_airport_iata_code = document.getElementById("modal_product_arrive_to_airport_iata_code")
		const _modal_product_arrive_to_airport_country_id = document.getElementById("modal_product_arrive_to_airport_country_id")
		const _modal_product_arrive_to_airport_province_id = document.getElementById("modal_product_arrive_to_airport_province_id")
		const _modal_product_arrive_to_airport_city_id = document.getElementById("modal_product_arrive_to_airport_city_id")
		const _modal_product_arrive_to_airport_city = document.getElementById("modal_product_arrive_to_airport_city")
		const _modal_product_arrive_to_airport = document.getElementById("modal_product_arrive_to_airport")
		const _modal_product_arrive_to_airport_id = document.getElementById("modal_product_arrive_to_airport_id")
		const _modal_product_arrive_to_airport_add_block = document.getElementById("modal_product_arrive_to_airport_add_block")
		const _modal_product_arrive_to_airport_types_id = document.getElementById("modal_product_arrive_to_airport_types_id")
		
		let user_id = (document.getElementById("user_id")) ? (!isNaN(parseInt(document.getElementById("user_id").value))) ? parseInt(document.getElementById("user_id").value) : 4 : 4
		let globalSelectedAirportDepartFrom = false
		let globalSelectedAirportArriveTo = false
		
		$(_modal_product_depart_from_airport_add_block)
			.on("change", function () {
				validDepartFromRecord()
			})
			.on("keyup", function () {
				validDepartFromRecord()
			})
		
		$(_modal_product_depart_from_airport_cancel_button)
			.on("click", function () {
				cancelAddAirportRecord("depart_from")
			})
		
		$(_modal_product_arrive_to_airport_cancel_button)
			.on("click", function () {
				cancelAddAirportRecord("arrive_to")
			})
		
		$(_modal_product_depart_from_airport_submit_button)
			.on("click", function () {
				save("depart_from")
			})
		
		$(_modal_product_arrive_to_airport_submit_button)
			.on("click", function () {
				save("arrive_to")
			})
		
		const save = function (type) {
			if (type) {
				let dataToSend = buildAddAirportRecord(type)
				
				if (dataToSend) {
					confirmDialog(`Would you like to update?`, (ans) => {
						if (ans) {
							sendSaveRequest(dataToSend, function (data) {
								let airport
								if (data) {
									airport = data
									if (data[0]) {
										airport = data[0]
									}
								}
								
								if (airport) {
									if (type === "depart_from") {
										if (_modal_product_depart_from_airport) {
											_modal_product_depart_from_airport.value = (airport.name) ? airport.name : ""
										}
										
										if (_modal_product_depart_from_new_airport_id) {
											_modal_product_depart_from_new_airport_id.value = (!isNaN(parseInt(airport.id))) ? parseInt(airport.id) : ""
										}
										
										if (_modal_product_depart_from_airport_id) {
											_modal_product_depart_from_airport_id.value = (!isNaN(parseInt(airport.id))) ? parseInt(airport.id) : ""
										}
										
										if (_modal_product_city_id) {
											_modal_product_city_id.value = (!isNaN(parseInt(airport.city.id))) ? parseInt(airport.city.id) : ""
										}
									}
									
									if (type === "arrive_to") {
										
										if (_modal_product_arrive_to_airport) {
											_modal_product_arrive_to_airport.value = (airport.name) ? airport.name : ""
										}
										
										if (_modal_product_arrive_to_new_airport_id) {
											_modal_product_arrive_to_new_airport_id.value = (!isNaN(parseInt(airport.id))) ? parseInt(airport.id) : ""
										}
										
										if (_modal_product_arrive_to_airport_id) {
											_modal_product_arrive_to_airport_id.value = (!isNaN(parseInt(airport.id))) ? parseInt(airport.id) : ""
										}
									}
									
									resetAirportForm(type)
									initAutocomplete()
								}
							})
						}
					})
				}
			}
		}
		
		const sendSaveRequest = function (dataToSend, callback) {
			if (dataToSend) {
				let url = "/api/v1.0/airports/update"
				try {
					sendPostRequest(url, dataToSend, function (data, status, xhr) {
						if (data) {
							return callback(data)
						} else {
							handleAirportError("Oops: 1")
						}
					})
				} catch (e) {
					console.log("error", e)
				}
			}
		}
		
		const validDepartFromRecord = function () {
			let isValid = true
			
			if (_modal_product_depart_from_airport_iata_code.value === "") {
				$(_modal_product_depart_from_airport_iata_code).showError("Field Required")
				isValid = false
			} else {
				$(_modal_product_depart_from_airport_iata_code).hideError()
			}
			
			if (_modal_product_depart_from_airport_types_id.value === "") {
				$(_modal_product_depart_from_airport_types_id).showError("Field Required")
				isValid = false
			} else {
				$(_modal_product_depart_from_airport_types_id).hideError()
			}
			
			if (isNaN(parseInt(_modal_product_depart_from_airport_city_id.value))) {
				$(_modal_product_depart_from_airport_city).showError("Field Required")
				isValid = false
			} else {
				$(_modal_product_depart_from_airport_city).hideError()
			}
			
			return isValid
		}
		
		const validArriveToRecord = function () {
			let isValid = true
			
			if (_modal_product_arrive_to_airport_iata_code.value === "") {
				$(_modal_product_arrive_to_airport_iata_code).showError("Field Required")
				isValid = false
			} else {
				$(_modal_product_arrive_to_airport_iata_code).hideError()
			}
			
			if (_modal_product_arrive_to_airport_types_id.value === "") {
				$(_modal_product_arrive_to_airport_types_id).showError("Field Required")
				isValid = false
			} else {
				$(_modal_product_arrive_to_airport_types_id).hideError()
			}
			
			if (isNaN(parseInt(_modal_product_arrive_to_airport_city_id.value))) {
				$(_modal_product_arrive_to_airport_city).showError("Field Required")
				isValid = false
			} else {
				$(_modal_product_arrive_to_airport_city).hideError()
			}
			
			return isValid
		}
		
		const buildAddAirportRecord = function (type) {
			if (_modal_product_depart_from_airport_add_block && _modal_product_arrive_to_airport_add_block) {
				if (type) {
					if (type === "depart_from") {
						if (validDepartFromRecord()) {
							let dataToSend = {
								airport_types_id: (!isNaN(parseInt(_modal_product_depart_from_airport_types_id.value))) ? parseInt(_modal_product_depart_from_airport_types_id.value) : null,
								city_id: (!isNaN(parseInt(_modal_product_depart_from_airport_city_id.value))) ? parseInt(_modal_product_depart_from_airport_city_id.value) : null,
								name: (_modal_product_depart_from_airport.value !== "") ? _modal_product_depart_from_airport.value : null,
								iata_code: (_modal_product_depart_from_airport_iata_code.value !== "") ? _modal_product_depart_from_airport_iata_code.value : null,
							}
							
							return removeNulls(dataToSend)
						}
					} else if (type === "arrive_to") {
						if (validArriveToRecord()) {
							let dataToSend = {
								airport_types_id: (!isNaN(parseInt(_modal_product_arrive_to_airport_types_id.value))) ? parseInt(_modal_product_arrive_to_airport_types_id.value) : null,
								city_id: (!isNaN(parseInt(_modal_product_arrive_to_airport_city_id.value))) ? parseInt(_modal_product_arrive_to_airport_city_id.value) : null,
								name: (_modal_product_arrive_to_airport.value !== "") ? _modal_product_arrive_to_airport.value : null,
								iata_code: (_modal_product_arrive_to_airport_iata_code.value !== "") ? _modal_product_arrive_to_airport_iata_code.value : null,
							}
							
							return removeNulls(dataToSend)
						}
					}
				}
			}
		}
		
		const cancelAddAirportRecord = function (type) {
			if (_modal_product_depart_from_airport_add_block && _modal_product_arrive_to_airport_add_block) {
				clearAirportForm(type)
				hideAirportForm(type)
				
				if (type) {
					if (type === "depart_from") {
					
					} else if (type === "arrive_to") {
					
					}
				}
			}
		}
		
		const populateAirportForm = function (airport, type) {
			if (_modal_product_depart_from_airport_add_block && _modal_product_arrive_to_airport_add_block) {
				clearAirportForm(type)
				
				showAirportForm(type)
			}
		}
		
		const clearAirportForm = function (type) {
			if (_modal_product_depart_from_airport_add_block && _modal_product_arrive_to_airport_add_block) {
				if (type) {
					if (type === "depart_from") {
						_modal_product_depart_from_airport_iata_code.value = ""
						_modal_product_depart_from_airport_city.value = ""
						_modal_product_depart_from_airport_city_id.value = ""
						_modal_product_depart_from_airport_country_id.value = ""
						_modal_product_depart_from_airport_province_id.value = ""
						_modal_product_depart_from_airport_city_id.value = ""
						_modal_product_depart_from_airport_types_id.value = ""
						_modal_product_depart_from_airport.disabled = false
						clearAllValidation()
					} else if (type === "arrive_to") {
						_modal_product_arrive_to_airport_iata_code.value = ""
						_modal_product_arrive_to_airport_city.value = ""
						_modal_product_arrive_to_airport_city_id.value = ""
						_modal_product_arrive_to_airport_country_id.value = ""
						_modal_product_arrive_to_airport_province_id.value = ""
						_modal_product_arrive_to_airport_city_id.value = ""
						_modal_product_arrive_to_airport_types_id.value = ""
						_modal_product_arrive_to_airport.disabled = false
						clearAllValidation()
					}
				}
			}
		}
		
		const resetAirportForm = function (type) {
			if (_modal_product_depart_from_airport_add_block && _modal_product_arrive_to_airport_add_block) {
				if (type) {
					_modal_product_arrive_to_airport.disabled = false
					_modal_product_depart_from_airport.disabled = false
					
					clearAirportForm(type)
					
					hideAirportForm("depart_from")
					hideAirportForm("arrive_to")
				}
			}
		}
		
		const hideAirportForm = function (type) {
			if (_modal_product_depart_from_airport_add_block && _modal_product_arrive_to_airport_add_block) {
				if (type) {
					if (type === "depart_from") {
						$(_modal_product_depart_from_airport_add_block).hide()
					} else if (type === "arrive_to") {
						$(_modal_product_arrive_to_airport_add_block).hide()
					}
				}
			}
		}
		
		const showAirportForm = function (type) {
			if (_modal_product_depart_from_airport_add_block && _modal_product_arrive_to_airport_add_block) {
				if (type) {
					if (type === "depart_from") {
						_modal_product_depart_from_airport.disabled = true
						$(_modal_product_depart_from_airport_add_block).show()
						$(_modal_product_arrive_to_airport_add_block).hide()
					} else if (type === "arrive_to") {
						_modal_product_arrive_to_airport.disabled = true
						$(_modal_product_arrive_to_airport_add_block).show()
						$(_modal_product_depart_from_airport_add_block).hide()
					}
				}
			}
		}
		
		const initAutocomplete = function () {
			
			if (_modal_product_depart_from_airport) {
				
				$(_modal_product_depart_from_airport)
					.on("click", function () {
						if ($(this).attr("readonly") === "readonly") {
							e.preventDefault()
						} else {
							$(this).select()
						}
					})
					.on("search", function () {
						if (_modal_product_depart_from_airport_id) {
							_modal_product_depart_from_airport_id.value = ""
						}
						if (_modal_product_depart_from_airport) {
							_modal_product_depart_from_airport.value = ""
						}
					})
					.on("keyup", function () {
						globalSelectedAirportDepartFrom = false
					})
					.on("change", function () {
						setTimeout(function () {
							let airport_name = _modal_product_depart_from_airport.value
							
							if (globalSelectedAirportDepartFrom === false) {
								if (airport_name === "") {
									_modal_product_depart_from_airport.value = ""
									_modal_product_depart_from_airport_id.value = ""
									globalSelectedAirportDepartFrom = false
								} else {
									airportExists(airport_name, "depart_from")
								}
							}
						}, 200)
					})
					.autocomplete({
						serviceUrl: "/api/v1.0/autocomplete/airports",
						minChars: 2,
						cache: false,
						dataType: "json",
						triggerSelectOnValidInput: false,
						paramName: "st",
						onSelect: function (suggestion) {
							if (!suggestion || !suggestion.data) {
								return
							}
							
							globalSelectedAirportDepartFrom = true
							
							let airport = suggestion.data
							
							if (airport) {
								if (_modal_product_depart_from_airport) {
									_modal_product_depart_from_airport.value = (airport.name) ? airport.name : ""
								}
								
								if (_modal_product_depart_from_airport_id) {
									_modal_product_depart_from_airport_id.value = (!isNaN(parseInt(airport.id))) ? parseInt(airport.id) : ""
								}
								
								if (_modal_product_city_id) {
									_modal_product_city_id.value = (!isNaN(parseInt(airport.city.id))) ? parseInt(airport.city.id) : ""
								}
								
							} else {
								resetAirportForm("depart_from")
								showAirportForm("depart_from")
							}
						},
					})
			}
			
			if (_modal_product_arrive_to_airport) {
				
				$(_modal_product_arrive_to_airport)
					.on("click", function () {
						if ($(this).attr("readonly") === "readonly") {
							e.preventDefault()
						} else {
							$(this).select()
						}
					})
					.on("keyup", function () {
						globalSelectedAirportArriveTo = false
					})
					.on("search", function () {
						if (_modal_product_arrive_to_airport_id) {
							_modal_product_arrive_to_airport_id.value = ""
						}
						if (_modal_product_arrive_to_airport) {
							_modal_product_arrive_to_airport.value = ""
						}
					})
					.on("change", function () {
						setTimeout(function () {
							let airport_name = _modal_product_arrive_to_airport.value
							
							if (globalSelectedAirportArriveTo === false) {
								if (airport_name === "") {
									_modal_product_arrive_to_airport.value = ""
									_modal_product_arrive_to_airport_id.value = ""
									globalSelectedAirportArriveTo = false
								} else {
									airportExists(airport_name, "arrive_to")
								}
							}
						}, 200)
					})
					.autocomplete({
						serviceUrl: "/api/v1.0/autocomplete/airports",
						minChars: 2,
						cache: false,
						dataType: "json",
						triggerSelectOnValidInput: false,
						paramName: "st",
						onSelect: function (suggestion) {
							if (!suggestion || !suggestion.data) {
								return
							}
							
							globalSelectedAirportArriveTo = true
							
							let airport = suggestion.data
							
							if (airport) {
								if (_modal_product_arrive_to_airport) {
									_modal_product_arrive_to_airport.value = (airport.name) ? airport.name : ""
								}
								
								if (_modal_product_arrive_to_airport_id) {
									_modal_product_arrive_to_airport_id.value = (!isNaN(parseInt(airport.id))) ? parseInt(airport.id) : ""
								}
								
							} else {
								resetAirportForm("arrive_to")
								showAirportForm("arrive_to")
							}
						},
					})
			}
			
		}
		
		const airportExists = function (name, type) {
			if (name && name !== "") {
				/**
				 * data to send to the server
				 *
				 * @type {{name}}
				 */
				let dataToSend = {
					name: name,
				}
				
				fetchByName(dataToSend, function (data) {
					let airport = null
					
					if (data) {
						airport = data
						if (data[0]) {
							airport = data[0]
						}
					}
					
					if (airport && airport.id) {
						if (type === "depart_from") {
							globalSelectedAirportDepartFrom = true
							_modal_product_depart_from_airport.value = airport.name
							_modal_product_depart_from_airport_id.value = airport.id
							_modal_product_city_id.value = airport.city.id
						} else {
							globalSelectedAirportArriveTo = true
							_modal_product_arrive_to_airport.value = airport.name
							_modal_product_arrive_to_airport_id.value = airport.id
						}
					} else {
						confirmDialog(`The airport: ${name} does not exist exists. Would you like to create it?`, (ans) => {
							if (ans) {
								if (type === "depart_from") {
									globalSelectedAirportDepartFrom = false
								} else {
									globalSelectedAirportArriveTo = false
								}
								
								populateAirportForm({
									name: name,
								}, type)
								
							} else {
								if (type === "depart_from") {
									if (_modal_product_city_id) {
										_modal_product_city_id.value = ""
									}
									
									if (_modal_product_depart_from_airport_id) {
										_modal_product_depart_from_airport_id.value = ""
									}
									if (_modal_product_depart_from_airport) {
										_modal_product_depart_from_airport.value = ""
									}
								} else {
									if (_modal_product_arrive_to_airport_id) {
										_modal_product_arrive_to_airport_id.value = ""
									}
									if (_modal_product_arrive_to_airport) {
										_modal_product_arrive_to_airport.value = ""
									}
								}
								
							}
						})
					}
				})
			}
		}
		
		const fetchByName = function (dataToSend, callback) {
			let url = "/api/v1.0/airports/validate"
			
			if (dataToSend) {
				try {
					sendGetRequest(url, dataToSend, function (data, status, xhr) {
						if (data) {
							return callback(data)
						} else {
							handleAirportError("Oops: 1")
						}
					})
				} catch (e) {
					console.log("error", e)
					handleAirportError("Error Validating Airport")
				}
			} else {
				handleAirportError("Error Loading Airport - Missing Data")
			}
		}
		
		const handleAirportError = function (msg) {
			toastr.error(msg)
		}
		
		const init = function (settings) {
			if (_modal_product_depart_from_airport || _modal_product_arrive_to_airport) {
				initAutocomplete()
				resetAirportForm("depart_from")
				resetAirportForm("arrive_to")
			}
		}
		
		return {
			resetAirportForm: function (type) {
				resetAirportForm(type)
			},
			init: function (settings) {
				init(settings)
			},
		}
	})()
</script>
<!-- /Airport -->

<!-- PricingStrategy -->
<script type="text/javascript">
	const PricingStrategy = (function () {
		"use strict"
		
		/**
		 * Static Variable Decloration
		 */
		const daysOfTheWeek = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"]
		const _product_id = document.getElementById("product_id")
		const _pricing_strategy_types_id = document.getElementById("pricing_strategy_types_id")
		const _pricing_strategy_unit_id = document.getElementById("pricing_strategy_unit_id")
		const _pricing_strategy_season_id = document.getElementById("pricing_strategy_season_id")
		const _pricing_container = document.getElementById("pricing_container")
		const panel_tab_pricing = document.getElementById("panel_tab_pricing")
		
		/**
		 * Dynamic Variable Decloration
		 */
		let variantCombinations = []
		let variant_id, variant_count, variant_name
		let user_id = (document.getElementById("user_id")) ? (!isNaN(parseInt(document.getElementById("user_id").value))) ? parseInt(document.getElementById("user_id").value) : 4 : 4
		
		/**
		 * Element Event Handlers
		 */
		$(_pricing_strategy_types_id)
			.on("change", function () {
				//variantCombinations = []
				//let pricingWorksheet = PricingWorksheet.init()
				//console.log(pricingWorksheet)
			})
		
		$(_pricing_strategy_season_id)
			.on("change", function () {
				//season_id = (!isNaN(parseInt(_pricing_strategy_season_id.value))) ? parseInt(_pricing_strategy_season_id.value) : null
				//emptyPricingMatrix()
				//buildPricingMatrix()
			})
		
		$(_pricing_strategy_unit_id)
			.on("change", function () {
				//unit_id = (!isNaN(parseInt(_pricing_strategy_unit_id.value))) ? parseInt(_pricing_strategy_unit_id.value) : null
				
			})
		
		/**
		 * buildPricingMatrix
		 */
		const buildPricingMatrix = function () {
			let pricingStrategyForm
			let pricingStrategyTypesId = (!isNaN(parseInt(_pricing_strategy_types_id.value))) ? parseInt(_pricing_strategy_types_id.value) : null
			let CONTAINER = $("<div/>")
			
			const tableDOW = function () {
				let tableHeadRow = $("<tr/>")
				let tableHeadRowColumn0 = $("<th/>", {
					class: "p-1",
				})
				let tableHeadRowColumn0Span = $("<span/>", {
					class: "p-1",
					html: '&nbsp;',
				})
				tableHeadRowColumn0.append(tableHeadRowColumn0Span)
				tableHeadRow.append(tableHeadRowColumn0)
				for (let n = 0; n < daysOfTheWeek.length; n++) {
					let tableHeadRowColumn = $("<th/>", {
						class: "p-1",
						text: `${ucwords(daysOfTheWeek[n])}`,
					})
					
					tableHeadRow.append(tableHeadRowColumn)
				}
				
				let tableHeadRowColumnSave = $("<th/>", {
					class: "p-1",
					html: '&nbsp;',
				})
				
				tableHeadRow.append(tableHeadRowColumnSave)
				return tableHeadRow
			}
			
			const closeAllToggles = function () {
				let els = document.getElementsByClassName("collapse-toggle")
				
				$.each(els, function (k, element) {
					collapseWindow(element)
				})
			}
			
			const openAllToggles = function () {
				let els = document.getElementsByClassName("collapse-toggle")
				
				$.each(els, function (k, element) {
					expandWindow(element)
				})
			}
			
			const seasonForm = function (unit, season) {
				
				const getMatrix = function (unit, season) {
					let pricingMatrix = [], seasonId, unitId, productId, matrixId
					
					const getVariantCombinations = function (depth, baseString, arrLetters) {
						for (let i = 0; i < arrLetters.length; i++) {
							if (depth === 1) {
								let variantComboId = baseString + arrLetters[i]
								
								let combos = variantComboId.split('-').map(function (item) {
									return parseInt(item, 10)
								})
								
								combos = combos.sort().join("-")
								
								let hasVariantComboIndex = variantCombinations.indexOf(variantComboId)
								if (hasVariantComboIndex < 0) {
									variantCombinations.push(combos)
								}
								
							} else {
								let id = arrLetters[i]
								getVariantCombinations(depth - 1, baseString + arrLetters[i] + "-", arrLetters)
							}
						}
					}
					
					const buildVariantListCombinations = function (unit, season) {
						let variants = getVariantsUsed()
						let unitId = (!isNaN(parseInt(unit.id))) ? parseInt(unit.id) : null
						variantCombinations = []
						
						if (unitId) {
							let unit = Unit.all.get(unitId)
							if (unit) {
								let min = (!isNaN(parseInt(unit.min_pax))) ? parseInt(unit.min_pax) : 1
								let max = (!isNaN(parseInt(unit.max_pax))) ? parseInt(unit.max_pax) : 1
								if (min > max) {
									let temp = max
									max = min
									min = temp
								}
								
								for (let n = min; n <= max; n++) {
									getVariantCombinations(n, "", variants)
								}
							}
						}
						
						return variantCombinations
					}
					
					const formatCombos = function (variantList) {
						let worksheet = Array.from(variantList.values())
						let pricingWorksheet = new Map()
						
						let sectionName = []
						let myPricings = []
						let hasWorksheet, code
						$.each(worksheet, function (index, variantComboList) {
							let name = variantComboList.name
							let count = variantComboList.count
							code = variantComboList.code
							let pricings = variantComboList.pricings
							hasWorksheet = pricingWorksheet.get(code)
							
							if (!hasWorksheet) {
								hasWorksheet = {
									name: null,
									pricings: [],
								}
							}
							
							sectionName.push(count + " " + pluralize(name, count))
							myPricings.push(pricings)
							
						})
						
						let wPricing = []
						let pricingGroupName = sectionName.join(", ")
						for (let m = 0; m < myPricings.length; m++) {
							for (let n = 0; n < myPricings[m].length; n++) {
								let priceLine = myPricings[m][n]
								
								let priceLineCode = priceLine.code
								let pricing = Pricing.all.get(priceLineCode)
								if (pricing) {
									//console.log("pricing", pricing)
								} else {
									pricing = Pricing.set()
								}
								
								pricing.code = priceLine.code
								pricing.count = priceLine.count
								pricing.name = priceLine.name
								pricing.product_id = productId
								pricing.season_id = seasonId
								pricing.unit_id = unitId
								pricing.variant_id = priceLine.variant_id
								wPricing.push(pricing)
							}
						}
						
						let matrix = Matrix.all.get(code)
						if (!matrix) {
							matrix = Matrix.set()
							matrix.code = code
							matrix.product_id = productId
							matrix.season_id = seasonId
							matrix.unit_id = unitId
						}
						
						pricingWorksheet.set(code, {
							been_saved: matrix.been_saved,
							code: matrix.code,
							cost: matrix.cost,
							created_by: matrix.created_by,
							date_created: matrix.date_created,
							date_modified: matrix.date_modified,
							enabled: matrix.enabled,
							has_pricing: matrix.has_pricing,
							id: matrix.id,
							margin: matrix.margin,
							modified_by: matrix.modified_by,
							note: matrix.note,
							price: matrix.price,
							product_id: matrix.product_id,
							season_id: matrix.season_id,
							unit_id: matrix.unit_id,
							name: pricingGroupName,
							pricings: wPricing,
						})
						
						return pricingWorksheet
					}
					
					const buildPricingMatrixCombinations = function (combos, unit, season) {
						
						let productId = (!isNaN(parseInt(_product_id.value))) ? parseInt(_product_id.value) : null
						let seasonId = (!isNaN(parseInt(season.id))) ? parseInt(season.id) : null
						let unitId = (!isNaN(parseInt(unit.id))) ? parseInt(unit.id) : null
						let matrixCode = productId + "-" + unitId + "-" + seasonId
						
						$.each(combos, function (k, variantComboId) {
							let variants = variantComboId.split("-").map(Number)
							let variantList = new Map()
							
							$.each(variants, function (k, variantId) {
								let variant = Variant.all.get(variantId)
								let hasVariant = variantList.get(variantId)
								
								if (hasVariant) {
									let variantCount = parseInt(hasVariant.count) + 1
									let count = variantCount
									hasVariant.count = variantCount
									hasVariant.pricings.push({
										code: matrixId + "-" + variantId + "-" + count,
										count: count,
										name: variant.name + " " + count,
										product_id: productId,
										season_id: seasonId,
										unit_id: unitId,
										variant_id: parseInt(variantId),
										mon: null,
										tue: null,
										wed: null,
										thu: null,
										fri: null,
										sat: null,
										sun: null,
										monMargin: null,
										tueMargin: null,
										wedMargin: null,
										thuMargin: null,
										friMargin: null,
										satMargin: null,
										sunMargin: null,
										enabled: 1,
										date_created: formatDateMySQL(),
										created_by: user_id,
										date_modified: formatDateMySQL(),
										modified_by: user_id,
										note: null,
									})
									variantList.set(variantId, hasVariant)
								} else {
									let variantCount = 0
									let count = variantCount + 1
									
									variantList.set(variantId, {
										count: count,
										name: variant.name,
										code: matrixCode,
										product_id: productId,
										season_id: seasonId,
										unit_id: unitId,
										cost: 0,
										enabled: 1,
										has_pricing: 0,
										id: null,
										margin: 0,
										price: 0,
										modified_by: user_id,
										note: null,
										created_by: user_id,
										date_created: formatDateMySQL(),
										date_modified: formatDateMySQL(),
										pricings: [
											{
												code: matrixCode + "-" + variantId + "-" + count,
												count: count,
												name: variant.name + " " + count,
												product_id: productId,
												season_id: seasonId,
												unit_id: unitId,
												matrix_id: null,
												variant_id: parseInt(variantId),
												mon: 0,
												tue: 0,
												wed: 0,
												thu: 0,
												fri: 0,
												sat: 0,
												sun: 0,
												monMargin: 0,
												tueMargin: 0,
												wedMargin: 0,
												thuMargin: 0,
												friMargin: 0,
												satMargin: 0,
												sunMargin: 0,
												enabled: 1,
												date_created: formatDateMySQL(),
												created_by: user_id,
												date_modified: formatDateMySQL(),
												modified_by: user_id,
												note: null,
											},
										],
									})
								}
								
							})
							
							let matrixLine = formatCombos(variantList)
							
							pricingMatrix.push(Array.from(matrixLine.values()))
							
						})
						
						return pricingMatrix
					}
					
					let comboMatrix
					
					if (unit && season) {
						productId = (!isNaN(parseInt(_product_id.value))) ? parseInt(_product_id.value) : null
						if (productId) {
							unitId = (!isNaN(parseInt(unit.id))) ? parseInt(unit.id) : null
							seasonId = (!isNaN(parseInt(season.id))) ? parseInt(season.id) : null
							
							if (unitId && seasonId) {
								matrixId = productId + "-" + unitId + "-" + seasonId
								let matrix = Matrix.all.get(matrixId)
								comboMatrix = buildPricingMatrixCombinations(buildVariantListCombinations(unit, season), unit, season)
								
								let variantCombinations = buildVariantListCombinations(unit, season)
								
								if (!matrix) {
									matrix = Matrix.set()
								} else {
									if (matrix.pricings) {
									
									}
								}
							}
						}
					}
					
					return comboMatrix
				}
				
				const seasonWrapper = function (unit, season) {
					let seasonWrapperId
					if (season) {
						let unitId = (!isNaN(parseInt(unit.id))) ? parseInt(unit.id) : null
						let seasonId = (!isNaN(parseInt(season.id))) ? parseInt(season.id) : null
						if (unitId && seasonId) {
							seasonWrapperId = "seasonForm_container_" + unitId + "_" + seasonId
						}
						
						return $("<div/>", {
							id: seasonWrapperId,
						})
					}
					
					return null
					
				}
				
				const seasonCollapse = function (unit, season) {
					let seasonId = (!isNaN(parseInt(season.id))) ? parseInt(season.id) : null
					let unitId = (!isNaN(parseInt(unit.id))) ? parseInt(unit.id) : null
					
					return $("<section/>", {
						id: "seasonFormContainer_" + unitId + "_" + seasonId,
					})
				}
				
				const seasonHeader = function (unit, season) {
					let TR, HEADING, SPAN, A, HEADINGWRAPPER, TD, colorScheme, backgroundColor, borderColor, textColor,
						seasonId, seasonName
					
					if (season) {
						colorScheme = season.color_scheme
						backgroundColor = (colorScheme.background_color) ? colorScheme.background_color : "#fff"
						borderColor = (colorScheme.border_color) ? colorScheme.border_color : "#fff"
						textColor = (colorScheme.text_color) ? colorScheme.text_color : "#fff"
						seasonName = season.name
						seasonId = (!isNaN(parseInt(season.id))) ? parseInt(season.id) : null
						
						SPAN = $("<span/>", {
							class: "",
							text: seasonName,
						})
						
						A = $("<a/>", {
							href: "javascript:void(0)",
							class: "panel_link",
							css: {
								"color": textColor,
							},
							html: "<i class='fas fa-angle-down'></i>",
						})
						
						HEADING = $("<h6/>", {
							class: "h6-responsive m-0 py-1 px-2",
							css: {
								"color": textColor,
							},
						})
							.attr("aria-expanded", "true")
							.attr("aria-target", "#seasonForm_container_" + unit.id + "_" + seasonId)
							.on("click", function () {
								let isExpanded = ($(this).attr("aria-expanded") === "true")
								if (isExpanded) {
									collapseWindow(this)
								} else {
									expandWindow(this)
								}
							})
							.append(SPAN, A)
						
						HEADINGWRAPPER = $("<div/>", {
							id: "seasonForm_" + unit.id + "_" + seasonId,
							class: "p-0 collapse-toggle",
							css: {
								"background": backgroundColor,
								"color": textColor,
								"border": "solid 1px " + borderColor,
								"cursor": "pointer",
							},
						})
							.append(HEADING)
					}
					
					return HEADINGWRAPPER
				}
				
				const buildMatrixForm = function (unit, season) {
					let matrix = getMatrix(unit, season)
					let pricings = (matrix.pricings) ? Array.from(matrix.pricings.values()) : []
					
					let WRAPPER = []
					
					$.each(pricings, function (index, pricing) {
						let matrixId = parseInt(pricing.matrix_id)
						let TBODY = $("<tbody/>")
							.attr("matrixid", matrixId)
						
						let TROW = matrixRow(pricing)
						
						TBODY.append(TROW)
						WRAPPER.push(TBODY)
					})
					
					return WRAPPER
				}
				
				const matrixRow = function (pricing) {
					return $("<tr/>")
				}
				
				let TABLE = $("<table class='table table-bordered'/>")
				let TABLEHEAD = $("<thead/>")
				let SEASONHEADER = seasonHeader(unit, season)
				let SEASONBLOCK = seasonWrapper(unit, season)
				let DOWROW = tableDOW()
				
				let SEASONROW = buildMatrixForm(unit, season)
				let SEASONCOLLAPSE = seasonCollapse(unit, season)
				
				TABLEHEAD.append(DOWROW)
				TABLE.append(TABLEHEAD)
				
				$.each(SEASONROW, function (index, row) {
					TABLE.append(row)
				})
				
				SEASONBLOCK.append(TABLE)
				SEASONCOLLAPSE.append(SEASONHEADER, SEASONBLOCK)
				
				return SEASONCOLLAPSE
				
			}
			
			const unitForm = function (units) {
				let UNITFORM, MATRIXFORM, TABLEBODY
				
				const unitFormHiddenFields = function (unit) {
					
					if (unit) {
						if (unit.id) {
							let unitId = (unit && unit.id && !isNaN(parseInt(unit.id))) ? parseInt(unit.id) : null
							
							return $("<div/>", {
								class: "row",
							})
								.append(
									/**
									 * columnWrapperMatrixId
									 */
									$("<div/>", {
										class: "col-3",
									})
										.append(
											/**
											 * inputWrapperMatrixId
											 */
											$("<div/>", {
												class: "form-element",
											})
												.append(
													$("<label>", {
														class: "d-none",
														for: "product_edit_matrix_id_" + unitId,
														text: "product_edit_matrix_id_" + unitId,
													}),
													$("<input/>", {
														type: "text",
														placeholder: "product_edit_matrix_id_" + unitId,
														disabled: "disabled",
														name: "product_edit_matrix_id_" + unitId,
														class: "form-control dev-element",
														id: "product_edit_matrix_id_" + unitId,
													}),
												),
										),
								)
						}
					}
					
					return null
				}
				
				const unitFormBaseFields = function (unit) {
					let unitId = unit.id
					
					let columnWrapperMatrixEnabled = $("<div/>",
						{
							class: "col-3 d-flex align-self-end justify-content-end pb-2 mb-2",
						})
						.append(
							$("<div/>", { class: "custom-control custom-switch" })
								.append(
									$("<div/>", { class: "form-element" })
										.append(
											$("<input/>",
												{
													type: "checkbox",
													name: "matrix_enabled_" + unitId,
													class: "custom-control-input",
													id: "matrix_enabled_" + unitId,
												},
											),
											
											$("<label/>",
												{
													class: "custom-control-label p-0",
													for: "matrix_enabled_" + unitId,
													text: "Enabled:",
												},
											),
										),
								),
						)
					
					let columnWrapperMatrixBaseCost = $("<div/>",
						{
							class: "col-3",
						})
						.append(
							$("<div/>", { class: "form-element" })
								.append(
									$("<label>",
										{
											class: "",
											for: "matrix_cost_" + unitId,
											text: "Base Cost:",
										},
									),
									
									$("<input/>",
										{
											type: "text",
											placeholder: "Base Cost",
											name: "matrix_cost_" + unitId,
											class: "form-control",
											id: "matrix_cost_" + unitId,
										},
									)
										.attr("data-type", "cost")
										.attr("data-form", `product_edit_matrix_form_${unitId}`)
										.on("keyup", function (e) {
											let val = $(this).val()
											let form = document.getElementById($(this).attr("data-form"))
											// ----
											
											if (form) {
												let inputs = document.getElementById($(this).attr("data-form")).querySelectorAll("[name='cost']")
												for (let i = 0; i < inputs.length; i++) {
													if (!inputs[i].disabled) {
														inputs[i].value = val
														$(inputs[i]).parent("div").find("label").addClass("active")
													} else {
														inputs[i].value = ""
														$(inputs[i]).parent("div").find("label").removeClass("active")
													}
												}
											}
										}),
								),
						)
					
					let columnWrapperMatrixBaseMargin = $("<div/>",
						{
							class: "col-3",
						})
						.append(
							$("<div/>",
								{
									class: "form-element",
								})
								.append(
									$("<label>",
										{
											class: "",
											for: "matrix_margin_" + unitId,
											text: "Base Margin:",
										},
									),
									
									$("<input/>",
										{
											type: "text",
											placeholder: "Base Margin",
											name: "matrix_margin_" + unitId,
											class: "form-control",
											id: "matrix_margin_" + unitId,
										},
									)
										.attr("data-type", "margin")
										.attr("data-form", `product_edit_matrix_form_${unitId}`)
										.on("keyup", function (e) {
											let val = $(this).val()
											let form = document.getElementById($(this).attr("data-form"))
											// ----
											
											if (form) {
												let inputs = document.getElementById($(this).attr("data-form")).querySelectorAll("[name='margin']")
												for (let i = 0; i < inputs.length; i++) {
													if (!inputs[i].disabled) {
														inputs[i].value = val
														$(inputs[i]).parent("div").find("label").addClass("active")
													} else {
														inputs[i].value = ""
														$(inputs[i]).parent("div").find("label").removeClass("active")
													}
												}
											}
										}),
								),
						)
					
					return $("<div/>", { class: "row" })
						.append(columnWrapperMatrixBaseCost, columnWrapperMatrixBaseMargin, columnWrapperMatrixEnabled)
				}
				
				const unitFormContainer = function (unit) {
					let TABLE = $("<div class=''/>")
					const tableBody = function (unit) {
						let TABLEBODY = $("<div/>")
						// ----
						
						$.each(Array.from(Season.all.values()), function (x, season) {
							if (unit && season) {
								TABLEBODY.append(seasonForm(unit, season))
							}
						})
						
						return TABLEBODY
					}
					
					TABLE.append(tableBody(unit))
					
					return TABLE
				}
				
				const unitFormButtons = function (unit) {
					
					let BUTTONROW = $("<div/>", {
						class: "w-100 text-right w-100",
					})
					let BUTTONROWCLEAR = $("<a/>", {
						href: "javascript:void(0);",
						class: "btn btn-flat primary-text text-center p-1 mx-0 mb-0 waves-effect waves-light",
						text: "Reset",
					})
					let BUTTONROWSUBMIT = $("<a/>", {
						href: "javascript:void(0);",
						class: "btn btn-primary btn-sm waves-effect waves-light",
						text: "Update",
					})
					
					return BUTTONROW.append(BUTTONROWCLEAR, BUTTONROWSUBMIT)
				}
				
				const unitFormHeading = function (unit) {
					let SPAN, I, A, HEADING, HEADINGWRAPPER
					
					let headingText = "Test Heading Text"
					let unitId = null
					if (unit) {
						unitId = unit.id
						headingText = unit.name
					}
					
					let elementId = "unitForm_" + unitId
					
					let wrapper = $("<div/>", {
						class: "card-header mb-2 collapse-toggle",
						css: {
							"cursor": "pointer",
							"background": "initial",
						},
						id: elementId,
					})
						.on("click", function () {
							let isExpanded = ($(this).attr("aria-expanded") === "true")
							if (isExpanded) {
								collapseWindow(this)
							} else {
								expandWindow(this)
							}
						})
					wrapper.attr("aria-expanded", "true")
					wrapper.attr("aria-target", "#unitForm_container_" + unitId)
					
					let heading = $("<h5/>", {
						class: "mb-0 w-100 d-flex align-items-center justify-content-between p-1",
					})
					
					SPAN = $("<span/>", {
						text: headingText,
					})
					
					I = $("<i/>", {
						class: "fas fa-angle-down",
					})
					
					A = $("<a />", {
						href: "javascript:void(0);",
						class: "panel_link",
					})
					A.attr("aria-hidden", "true")
					A.append(I)
					
					wrapper.append(heading.append(SPAN, A))
					return wrapper
				}
				
				const buildUnitFormCollapse = function (unit) {
					if (unit) {
						let HIDDENFIELDS, BUTTONS, BASEFIELDS, UNITCONTAINER
						let unitId = (!isNaN(parseInt(unit.id))) ? parseInt(unit.id) : null
						HIDDENFIELDS = unitFormHiddenFields(unit)
						BUTTONS = unitFormButtons(unit)
						BASEFIELDS = unitFormBaseFields(unit)
						UNITCONTAINER = unitFormContainer(unit)
						
						return $("<div/>",
							{
								id: "unitForm_container_" + unitId,
								class: "",
							})
							.attr("id", "unitForm_container_" + unitId)
							.append(HIDDENFIELDS, BASEFIELDS, UNITCONTAINER, BUTTONS)
					}
					
					return null
				}
				
				const buildUnitForm = function (unit) {
					
					let UNITFORM = $("<div/>", {
						class: "",
					})
					
					if (unit) {
						if (unit.id) {
							let unitId = (unit && unit.id && !isNaN(parseInt(unit.id))) ? parseInt(unit.id) : null
							UNITFORM.attr("id", unitId)
						}
					}
					
					if (unit) {
						let unitId = (!isNaN(parseInt(unit.id))) ? parseInt(unit.id) : null
						
						let UNITHEADING = unitFormHeading(unit)
						let UNITCOLLAPSE = buildUnitFormCollapse(unit)
						// ----
						if (unitId) {
							
							UNITFORM
								.attr("id", "unitForm_" + unitId)
								.append(UNITHEADING, UNITCOLLAPSE)
						}
						
						return UNITFORM
					}
					
					return null
				}
				
				$.each(units, function (k, unit) {
					if (unit.id) {
						let unitId = (!isNaN(parseInt(unit.id))) ? parseInt(unit.id) : null
						
						MATRIXFORM = $("<div/>", {
							id: "product_edit_matrix_form_" + unitId,
							class: "",
						})
						
						UNITFORM = buildUnitForm(unit)
						MATRIXFORM.append(UNITFORM)
						CONTAINER.append(MATRIXFORM)
					}
				})
				
				return CONTAINER
			}
			
			const matrixForm = function (units) {
				unitForm(units)
				$(_pricing_container).append(unitForm(units))
			}
			
			const buildPricingMatrix = function (units) {
				matrixForm(units)
			}
			
			if (pricingStrategyTypesId !== null) {
				switch (pricingStrategyTypesId) {
					case 1:
						//Per Unit
						variant_id = 0
						variant_count = 0
						variant_name = "Other"
						//buildPricingMatrix(Array.from(PricingStrategy.unitSeasons.values()))
						closeAllToggles()
						break
					case 2:
						//Per Person
						//console.log("Per Person")
						
						//buildPricingMatrix(Array.from(PricingStrategy.unitSeasons.values()))
						break
					case 3:
						//Per Days
						variant_id = 0
						variant_count = 0
						variant_name = "Other"
						
						//buildPricingMatrix(Array.from(PricingStrategy.unitSeasons.values()))
						openAllToggles()
						break
					default:
						return
				}
			}
		}
		
		const updatePricingStrategyTypesId = function (pricing_strategy_types_id) {
			if (pricing_strategy_types_id) {
				pricing_strategy_types_id = (!isNaN(parseInt(_pricing_strategy_types_id.value))) ? parseInt(_pricing_strategy_types_id.value) : null
				//emptyPricingMatrix()
				//buildPricingMatrix()
			}
		}
		
		const getVariantsUsed = function () {
			let results = []
			
			let variantsUsed = findObjectByKey(Array.from(Variant.all.values()), 'used_in_pricing', 1)
			$.each(variantsUsed, function (k, variant) {
				let id = (!isNaN(parseInt(variant.id))) ? parseInt(variant.id) : null
				if (!is_null(id)) {
					results.push(id)
				}
			})
			
			return results.sort()
			
		}
		
		const collapseWindow = function (_this) {
			let targetElement = $(_this).attr("aria-target")
			let icon = $(_this).find("i")
			icon.removeClass("fa-angle-down").addClass("fa-angle-up")
			$(_this).attr("aria-expanded", "false")
			$(targetElement).slideUp()
		}
		
		const expandWindow = function (_this) {
			let icon = $(_this).find("i")
			let targetElement = $(_this).attr("aria-target")
			icon.removeClass("fa-angle-up").addClass("fa-angle-down")
			$(_this).attr("aria-expanded", "true")
			$(targetElement).slideDown()
		}
		
		const buildUnitSeasonValues = function () {
			PricingStrategy.unitSeasons = new Map()
			
			$.each(Array.from(Unit.all.values()), function (k, unit) {
				PricingStrategy.unitSeasons.set(unit.id, {
					id: unit.id,
					name: unit.name,
					seasons: Season.all,
				})
			})
		}
		
		const clearUnitSelection = function () {
			$(_pricing_strategy_unit_id).val([]).trigger("change")
		}
		
		const clearSeasonSelection = function () {
			$(_pricing_strategy_season_id).val([]).trigger("change")
		}
		
		const updatePrice = function (el) {
			let costEl = document.getElementById(el)
			let marginEl = document.getElementById(el.replace('cost', 'margin'))
			let priceEl = document.getElementById(el.replace('cost', 'price'))
			// ----
			//let cost = (!isNaN(parseInt(costEl.value))) ? parseInt(costEl.value) : 0
			//let margin = ((!isNaN(parseInt(marginEl.value))) ? parseInt(marginEl.value) : 0) / 100
			
			priceEl.value = parseInt(((!isNaN(parseInt(costEl.value))) ? parseInt(costEl.value) : 0 / 100) + (!isNaN(parseInt(costEl.value))) ? parseInt(costEl.value) : 0)
			
		}
		
		const updateStatus = function () {
			let test = 4
			if (test === 0) {
				$(panel_tab_pricing).append($("<span>", {
					class: "badge rounded-pill badge-notification bg-danger tab-badge",
					alt: "Notification",
					css: { "color": "rgb(255, 255, 255) !important" },
					text: '!',
				}))
			} else {
				$(panel_tab_pricing).find("span").remove()
			}
		}
		
		const init = function (pricing_strategies) {
		
		}
		
		return {
			all: new Map(),
			unitSeasons: new Map(),
			updateStatus: function () {
				updateStatus()
			},
			init: function (pricing_strategies) {
				init(pricing_strategies)
			},
			updatePrice: function (el) {
				updatePrice(el)
			},
			clearUnitSelection: function () {
				clearUnitSelection()
			},
			clearSeasonSelection: function () {
				clearSeasonSelection()
			},
			buildUnitSeasonValues: function () {
				buildUnitSeasonValues()
			},
		}
		
	})()
</script>
<!-- /PricingStrategy -->

<!-- TimeSelect -->
<script type="text/javascript">
	jQuery(($) => {
		$.fn.timeSelect = function (opt) {
			let element = $(this)
			let filterMax = ""
			let elementId = element.attr("id")
			let separatorTime = ":"
			
			element.attr("id", "time-selector-" + elementId)
			
			let $element, $elementWrapper, $elementGroupWrapper, $elementGroupAppend, $buttonGroupAppend,
				$input, $inputLabel, $errorElement, $buttonGroupAppendClear, input, picker
			
			let defaults = {
				// Translations and clear button
				clear: 'Clear',
				
				// Formats
				format: 'h:i A',
				formatLabel: undefined,
				formatSubmit: undefined,
				hiddenPrefix: undefined,
				hiddenSuffix: '_submit',
				
				// Editable input
				editable: undefined,
				
				// Time intervals
				interval: 30,
				
				// Time limits
				min: undefined,
				max: undefined,
				
				// Root picker container
				container: undefined,
				
				// Hidden input container
				containerHidden: undefined,
				
				// Close on a user action
				closeOnSelect: true,
				closeOnClear: true,
				
				// Events
				onStart: undefined,
				onRender: undefined,
				onOpen: undefined,
				onClose: undefined,
				onSet: undefined,
				onStop: undefined,
			}
			
			let settings = {
				label: "Time",
				placeholder: "Select Time",
			}
			
			const isNumeric = function (input, keyCode) {
				if (!isNaN(parseInt(keyCode))) {
					keyCode = parseInt(keyCode)
				}
				
				if (keyCode === 16) {
					isShift = true
				}
				
				if ((keyCode >= 48 && keyCode <= 57) || (keyCode >= 96 && keyCode <= 105) || (keyCode === 8) || (keyCode === 46)) {
					
					if (keyCode !== 16) {
						if ((input.value.length === 2) && keyCode !== 8) {
							input.value += separatorTime
						}
						
						return true
					}
					
				}
				
				return false
			}
			
			const loadError = function (input) {
				let $errorElement = $(input).parents("div.form-element").find("div.error")
				
				$errorElement.html("Invalid Time. Only HH-MM format allowed.").show()
			}
			
			const unSetTimeError = function (input) {
				let $errorElement = $(input).parents("div.form-element").find("div.error")
				
				$errorElement.html("").hide()
			}
			
			function validate_time (time) {
				var a = true
				var time_arr = time.split(":")
				
				if (time_arr.length !== 2) {
					a = false
				} else {
					if (isNaN(time_arr[0]) || isNaN(time_arr[1])) {
						a = false
					}
					if (time_arr[0] < 24 && time_arr[1] < 60) {
						if (time_arr[0] && time_arr[1] && !isNaN(parseInt(time_arr[0])) && !isNaN(parseInt(time_arr[1]))) {
							if (parseInt(time_arr[0]) <= 9) {
								time_arr[0] = "0" + time_arr[0]
							}
							if (parseInt(time_arr[1]) <= 9) {
								time_arr[0] = "0" + time_arr[0]
							}
							$(input).val(time_arr[0] + ":" + time_arr[1])
						} else {
							return false
						}
					} else {
						a = false
					}
				}
				return a
			}
			
			const validateTimeFormat = function (input, keyCode) {
				let timeString = input.value
				//let regex = /^\d{2,}:(?:[0-5]\d):(?:[0-5]\d)$/
				
				if (validate_time(timeString)) {
					//if (regex.test(timeString) || timeString.length === 0) {
					unSetTimeError(input)
				} else {
					loadError(input)
				}
			}
			
			const buildElements = function (element, opt) {
				$element = element
				$elementWrapper = $("<div>")
					.addClass(`form-element`)
				
				$elementGroupWrapper = $("<div>")
					.addClass(`input-group`)
				
				$elementGroupAppend = $("<div>")
					.addClass(`input-group-append`)
				
				$buttonGroupAppend = $("<button type='button'>")
					.attr("id", "button-" + elementId)
					.attr("type", "button")
					.addClass(`btn btn-md btn-secondary m-0 px-3 py-2 z-depth-0 waves-effect waves-light`)
					.html('<i class="fas fa-calendar-alt"></i>')
					.on("click", function (e) {
						e.preventDefault()
					})
				
				$buttonGroupAppendClear = $("<button type='button'>")
					.attr("id", "button-clear-" + elementId)
					.addClass(`btn btn-md btn-outline-danger m-0 px-3 py-2 z-depth-0 waves-effect waves-light`)
					.html('<i class="fas fa-ban"></i>')
					.on("click", function () {
						TimeSelect.clear()
						$input.val("").trigger("change")
						unSetTimeError($input[0])
					})
				
				$input = $("<input>")
					.addClass("form-control time-format")
					.attr("id", elementId)
					.attr("type", "text")
					.attr("placeholder", settings.placeholder)
					.attr("maxlength", "5")
					.on("keydown", function (event) {
						return isNumeric(this, event.keyCode)
					})
					.on("keyup", function (event) {
						validateTimeFormat(this, event.keyCode)
						toggleClearButton()
					})
					.on("change", function () {
						toggleClearButton()
					})
				
				$inputLabel = $("<label>")
					.attr("for", elementId)
					.html(settings.label)
				
				$errorElement = $("<div>")
					.addClass("error w-100 text-center")
			}
			
			const toggleClearButton = function () {
				if ($input.val() !== "") {
					$buttonGroupAppendClear.show()
					let id = $input.attr("id")
					clearError(document.getElementById(id))
				} else {
					$buttonGroupAppendClear.hide()
				}
			}
			
			const setWrapper = function (element, opt) {
				buildElements(element, opt)
				$elementGroupAppend.append($buttonGroupAppendClear, $buttonGroupAppend)
				$elementGroupWrapper.append($input, $elementGroupAppend)
				$elementWrapper.append($inputLabel, $elementGroupWrapper, $errorElement)
				$element.append($elementWrapper)
				picker = $buttonGroupAppend.pickatime("picker")
			}
			
			const assignOptions = function (newOptions) {
				if (newOptions) {
					$.each(newOptions, function (k, v) {
						defaults[k] = v
					})
				}
				
			}
			
			const clear = function () {
				
				if (TimeSelect.picker.clear()) {
					TimeSelect.picker.clear()
					TimeSelect.picker.set("select", moment().format("YYYY-MM-DD"), { format: "HH-i" })
					TimeSelect.picker.render()
					unSetTimeError($input[0])
				}
			}
			
			const set = function (opts) {
				if (!opts) {
					opts = {}
				}
				
				TimeSelect.picker.set(opts, { muted: true })
				
			}
			
			const value = function (date) {
				
				if (date) {
					TimeSelect.picker.set("select", date, { format: "HH-i" })
					TimeSelect.picker.render()
					return null
				} else {
					return ($input.val() === "") ? null : $input.val()
				}
				
			}
			
			const TimeSelect = {
				picker: null,
				val: null,
				fooListener: function (val) {},
				registerNewListener: function (externalListenerFunction) {
					this.fooListener = externalListenerFunction
				},
				set: function () {
					set()
				},
				value: function (dataValue) {
					if (!dataValue) {
						dataValue = null
					}
					return value(dataValue)
				},
				clear: function () {
					clear()
				},
				init: function (element, opt) {
					init(element, opt)
				},
			}
			
			const init = function (element, opt) {
				assignOptions(opt)
				
				settings.label = ($(element).attr("data-label")) ? $(element).attr("data-label") : "Date"
				settings.placeholder = ($(element).attr("data-placeholder")) ? $(element).attr("data-placeholder") : "Select Date"
				
				setWrapper(element, opt)
				
				$buttonGroupAppend
					.pickatime(defaults)
					.on("change", function () {
						if ($(this).val() === "") {
							$input.val(filterMax)
						} else {
							$input.val($(this).val())
						}
						
						$input.trigger("change")
					})
				
				picker = $buttonGroupAppend.pickatime("picker")
				toggleClearButton()
				TimeSelect.picker = $buttonGroupAppend.pickatime("picker")
			}
			
			init(element, opt)
			return TimeSelect
		}
	})

</script>
<!-- /TimeSelect -->

<!-- ProductSearch -->
<script type="text/javascript">
	let today = new Date()
	let today_year = today.getFullYear()
	let today_month = today.getMonth()
	let today_date = today.getDate()
	$.fn.productSearch = function (settings) {
		"use strict"
		
	}
	
	const ProductSearch = function (settings) {
		"use strict"
		
		const _form_product_search = document.getElementById("form_product_search")
		const _formProductSearchCitySubmit = document.getElementById('formProductSearchCitySubmit')
		const _formProductSearchNameSubmit = document.getElementById('formProductSearchNameSubmit')
		const _formProductSearchGuestSubmit = document.getElementById('formProductSearchGuestSubmit')
		const _formProductSearchName = document.getElementById('formProductSearchName')
		const _product_search_name_display = document.getElementById('product_search_name_display')
		const _form_product_search_hotel_product_name = document.getElementById('form_product_search_hotel_product_name')
		const _buttonProductSearchName = document.getElementById("buttonProductSearchName")
		const roomNumber = document.getElementById('product_search_room_quantity')
		const adultNumber = document.getElementById('product_search_adult_quantity')
		const childNumber = document.getElementById('product_search_clild_quantity')
		const _form_product_search_hotel_product_number_of_rooms = document.getElementById('form_product_search_hotel_product_number_of_rooms')
		const _form_product_search_hotel_product_number_of_adults = document.getElementById('form_product_search_hotel_product_number_of_adults')
		const _form_product_search_hotel_product_number_of_children = document.getElementById('form_product_search_hotel_product_number_of_children')
		const _buttonProductSearchGuest = document.getElementById('buttonProductSearchGuest')
		const roomDisplay = document.getElementById('product_search_room_quantity_display')
		const adultDisplay = document.getElementById('product_search_adult_quantity_display')
		const childDisplay = document.getElementById('product_search_children_quantity_display')
		const _buttonProductSearchCity = document.getElementById('buttonProductSearchCity')
		const _formProductSearchCity = document.getElementById("formProductSearchCity")
		const _product_search_city_display = document.getElementById('product_search_city_display')
		const _form_product_search_hotel_product_city_id = document.getElementById('form_product_search_hotel_product_city_id')
		const _formProductSearchCityId = document.getElementById("formProductSearchCityId")
		const _buttonProductSearchCheckOut = document.getElementById("buttonProductSearchCheckOut")
		const _buttonProductSearchCheckIn = document.getElementById("buttonProductSearchCheckIn")
		const _form_product_search_hotel_product_arrive_date = document.getElementById("form_product_search_hotel_product_arrive_date")
		const _form_product_search_hotel_product_depart_date = document.getElementById("form_product_search_hotel_product_depart_date")
		const _product_search_category_display = document.getElementById("product_search_category_display")
		const _product_search_name_icon_display = document.getElementById("product_search_name_icon_display")
		const _formProductSearchIcon = document.getElementById("formProductSearchIcon")
		const _formProductSearchGuestClose = document.getElementById("formProductSearchGuestClose")
		const _formProductSearchCityClose = document.getElementById("formProductSearchCityClose")
		const _formProductSearchNameClose = document.getElementById("formProductSearchNameClose")
		const _form_product_search_hotel_product_category_id = document.getElementById("form_product_search_hotel_product_category_id")
		const _buttonProductSearchCategory = document.getElementById("buttonProductSearchCategory")
		const _formProductSearchNameId = document.getElementById("formProductSearchNameId")
		const _product_search_subtitle = document.getElementById("product_search_subtitle")
		const _button_product_search_panel_hotels_clear = document.getElementById("button_product_search_panel_hotels_clear")
		const _product_search_check_in_display = document.getElementById("product_search_check_in_display")
		const _product_search_check_out_display = document.getElementById("product_search_check_out_display")
		const _form_product_search_hotel_product_product_id = document.getElementById("form_product_search_hotel_product_product_id")
		const _button_product_search_panel_hotels_submit = document.getElementById("button_product_search_panel_hotels_submit")
		const _product_search_results = document.getElementById("product_search_results")
		
		let popupGuestTitle, popupGuestContent, popupNameTitle, popupNameContent, popupCityTitle, popupCityContent, category_id, categoryItem
		let startDate = []
		
		$(_form_product_search)
			.on("change", function () {
			
			})
		
		$(_button_product_search_panel_hotels_submit)
			.on("click", function () {
				buildSearchParameters()
			})
		
		$(_button_product_search_panel_hotels_clear)
			.on("click", function () {
				resetForm()
			})
		
		$(_form_product_search_hotel_product_category_id)
			.on("change", function () {
				if (_form_product_search_hotel_product_category_id.dataset.categoryid) {
					categoryChanged()
					let categoryId = parseInt(_form_product_search_hotel_product_category_id.dataset.categoryid)
					let categoryName = _form_product_search_hotel_product_category_id.dataset.categoryname
					let categoryIcon = _form_product_search_hotel_product_category_id.dataset.categoryicon
					_form_product_search_hotel_product_category_id.value = categoryId
					_product_search_name_icon_display.classList = categoryIcon + " btn-guest-picker-icon"
					_product_search_category_display.innerText = categoryName
					switch (categoryId) {
						case 1:
							enableHotelFormFields()
							console.log("Hotels")
							break
						case 2:
							enableFlightFormFields()
							console.log("Flights")
							break
						case 3:
							console.log("Cars")
							break
						case 4:
							console.log("Rail")
							break
						case 5:
							console.log("Transport")
							break
						case 6:
							console.log("Tours")
							break
						case 7:
							console.log("Cruises")
							break
						case 8:
							console.log("Packages")
							break
						case 9:
							console.log("Other")
							break
						default:
							console.log("Default")
							break
					}
				}
			})
		
		$(_buttonProductSearchCategory)
			.on("click", function () {
				closeProductGuestSearch()
				closeProductNameSearch()
				closeProductCitySearch()
			})
		
		$(_buttonProductSearchCheckIn)
			.on("click", function () {
				closeProductGuestSearch()
				closeProductNameSearch()
				closeProductCitySearch()
			})
			.datepicker({
				startDate: '-1d',
				autoclose: true,
				//numberOfMonths: 2,
				title: function () {
					return "<div class='popover-header'><span class='cPZwQ'>Select a date to continue</span></div>"
				},
				//clearBtn: true,
				todayHighlight: false,
				//todayBtn: true,
				format: "yyyy-mm-dd",
				orientation: "bottom auto",
				showOnFocus: "false",
				beforeShowDay: function (date) {
					/*
					var highlight = eventDates[date]
					if (highlight) {
						console.log("y")
						return {
							content: "This",
							classList: [true, "test1"],
						}
					} else {
						return [true, 'tttt', 'Tooltip']
					}
					//*/
				},
			})
			.on("changeDate", function (selected) {
				const _buttonProductSearchCheckIn = document.getElementById("buttonProductSearchCheckIn")
				const roomDisplay = document.getElementById('buttonProductSearchCheckIn')
				
				let formattedDate = $(_buttonProductSearchCheckIn).datepicker("getFormattedDate")
				
				startDate = [getTimeStamp($(_buttonProductSearchCheckIn).datepicker("getFormattedDate"))]
				_form_product_search_hotel_product_arrive_date.value = formattedDate
				
				if (roomDisplay) {
					$(roomDisplay).find("span#product_search_check_in_display").text((formattedDate === "") ? " — / — / — " : formattedDate)
				}
				
				$(_buttonProductSearchCheckOut)
					.val("")
					.datepicker("setStartDate", (formattedDate !== "") ? formattedDate : null)
					.datepicker("update")
					.trigger("changeDate")
					.datepicker("update")
			})
		
		$(_buttonProductSearchCheckOut)
			.on("click", function () {
				closeProductGuestSearch()
				closeProductNameSearch()
				closeProductCitySearch()
			})
			.datepicker({
				startDate: '-1d',
				autoclose: true,
				todayBtn: "linked",
				numberOfMonths: 2,
				title: function () {
					return "<div class='popover-header'><span class='cPZwQ'>Select a date to continue</span></div>"
				},
				clearBtn: true,
				todayHighlight: false,
				maxViewMode: 2,
				format: "yyyy-mm-dd",
				orientation: "bottom auto",
				showOnFocus: "false",
				toggleActive: true,
				autoSize: true,
				defaultViewDate: {
					year: today_year,
					month: today_month,
					day: today_date,
				},
				beforeShowDay: function (date) {
					
					//let y = date.getFullYear().toString() // get full year
					//let m = (date.getMonth() + 1).toString() // get month.
					//let d = date.getDate().toString() // get Day
					
					//if (m.length === 1) { m = '0' + m } // append zero(0) if single digit
					//if (d.length === 1) { d = '0' + d } // append zero(0) if single digit
					
					//let currDate = getTimeStamp(y + '-' + m + '-' + d)
					
					//if ($.inArray(currDate, startDate) > -1) {
					//console.log(this)
					//console.log("dates", startDate)
					//console.log("currDate", currDate)
					//console.dir(this)
					//return {
					//	content: date.getUTCDate(),
					//	dateClass: 'blue-highlight',
					//}
					//return [true, "blue-highlight"]
					//} else {
					//return [true, "red-highlight"]
					//}
				},
				beforeShowMonth: function (date) {
					//console.log(date)
				},
			})
			.on("changeDate", function (e) {
				const roomDisplay = document.getElementById('buttonProductSearchCheckOut')
				let formattedDate = $(_buttonProductSearchCheckOut).datepicker("getFormattedDate")
				
				_form_product_search_hotel_product_depart_date.value = formattedDate
				
				if (roomDisplay) {
					$(roomDisplay).find("span#product_search_check_out_display").text((formattedDate === "") ? " — / — / — " : formattedDate)
				}
				
			})
		
		$(_formProductSearchNameClose)
			.on("click", function () {
				closeProductNameSearch()
			})
		
		$(_formProductSearchCityClose)
			.on("click", function () {
				closeProductCitySearch()
			})
		
		$(_formProductSearchGuestClose)
			.on("click", function () {
				closeProductGuestSearch()
			})
		
		$(_formProductSearchCitySubmit)
			.on("click", function () {
				updateProductCitySearch()
				closeProductGuestSearch()
			})
		
		$(_formProductSearchNameSubmit)
			.on("click", function () {
				updateProductNameSearch()
				closeProductNameSearch()
			})
		
		$(_formProductSearchGuestSubmit)
			.on("click", function () {
				updateProductGuestSearch()
				closeProductGuestSearch()
			})
		
		$(_buttonProductSearchCity)
			.on("show.bs.popover", function () {
				initProductCitySearch()
				
			})
			.on("shown.bs.popover", function () {
				//_formProductSearchCity.focus()
			})
			.on("hidden.bs.popover", function () {
				window.removeEventListener("click", clickOutsideProductNameSearch)
			})
		
		$(_buttonProductSearchGuest)
			.on("show.bs.popover", function () {
				initProductGuestSearch()
				
			})
			.on("shown.bs.popover", function () {
				//_formProductSearchName.focus()
			})
			.on("hidden.bs.popover", function () {
				window.removeEventListener("click", clickOutsideProductGuestSearch)
			})
		
		$(_buttonProductSearchName)
			.on("show.bs.popover", function () {
				initProductNameSearch()
			})
			.on("shown.bs.popover", function () {
				//_formProductSearchName.focus()
			})
			.on("hidden.bs.popover", function () {
				window.removeEventListener("click", clickOutsideProductNameSearch)
			})
		
		const getTimeStamp = function (selectedDate) {
			if (!isNaN(Date.parse(selectedDate))) {
				let date = new Date(selectedDate + " 00:00")
				let y = date.getFullYear().toString() // get full year
				let m = (date.getMonth() + 1).toString() // get month.
				let d = date.getDate().toString() // get Day
				
				if (m.length === 1) { m = '0' + m } // append zero(0) if single digit
				if (d.length === 1) { d = '0' + d } // append zero(0) if single digit
				
				return moment(y + '-' + m + '-' + d + ' 00:00', "YYYY-MM-DD H:mm").valueOf()
			}
			
		}
		
		const clearSearchResults = function () {
		
		}
		
		const submitHotel = function (params, callback) {
			let url = "/api/v1.0/search/hotels"
			
			if (params) {
				try {
					sendGetRequest(url, params, function (data, status, xhr) {
						if (data) {
							return callback(data)
						}
					})
				} catch (e) {
					console.log("error", e)
				}
			}
		}
		
		const hotelSearch = function (data) {
			clearSearchResults()
			submitHotel(data, function (results) {
				if (results) {
					console.log("results", results)
				}
			})
		}
		
		const buildSearchParameters = function () {
			let categoryId = (!isNaN(parseInt(_form_product_search_hotel_product_category_id.value))) ? parseInt(_form_product_search_hotel_product_category_id.value) : null
			
			if (!categoryId) {
				return
			}
			let data = {}
			
			switch (categoryId) {
				case 1:
					let adults = (!isNaN(parseInt(_form_product_search_hotel_product_number_of_adults.value))) ? parseInt(_form_product_search_hotel_product_number_of_adults.value) : 1
					let children = (!isNaN(parseInt(_form_product_search_hotel_product_number_of_children.value))) ? parseInt(_form_product_search_hotel_product_number_of_children.value) : 0
					let cityId = (!isNaN(parseInt(_form_product_search_hotel_product_city_id.value))) ? parseInt(_form_product_search_hotel_product_city_id.value) : null
					let guestCount = (adults + children)
					let fromDate = (_form_product_search_hotel_product_arrive_date.value !== "") ? _form_product_search_hotel_product_arrive_date.value : null
					let toDate = (_form_product_search_hotel_product_depart_date.value !== "") ? _form_product_search_hotel_product_depart_date.value : null
					
					if (cityId && fromDate && toDate) {
						data.category_id = categoryId
						data.city_id = cityId
						data.from_date = fromDate
						data.to_date = toDate
						data.pax = guestCount
						
						hotelSearch(data)
					}
					
					break
				default:
					return
			}
		}
		
		const resetForm = function () {
			$("div[data-hotel='true'").hide()
			$("div[data-flight='true'").hide()
			
			closeProductGuestSearch()
			closeProductNameSearch()
			closeProductCitySearch()
			
			updateProductGuestSearch()
			updateProductNameSearch()
			updateProductCitySearch()
			
			_product_search_category_display.innerText = "** Select **"
			_product_search_name_display.innerText = "any"
			_product_search_city_display.innerText = "city name"
			_product_search_check_in_display.innerText = "— / — / —"
			_product_search_check_out_display.innerText = "— / — / —"
			
			roomNumber.value = 1
			adultNumber.value = 1
			childNumber.value = 0
			
			let roomCount = (!isNaN(parseInt(roomNumber.value))) ? parseInt(roomNumber.value) : 1
			let adultCount = (!isNaN(parseInt(adultNumber.value))) ? parseInt(adultNumber.value) : 1
			let childCount = (!isNaN(parseInt(childNumber.value))) ? parseInt(childNumber.value) : 0
			
			roomDisplay.innerText = (roomCount > 1) ? roomCount + ' rooms, ' : roomCount + ' room, '
			adultDisplay.innerText = (adultCount > 1) ? adultCount + ' adults, ' : adultCount + ' adult, '
			childDisplay.innerText = (childCount > 1) ? childCount + ' children' : childCount + ' child'
			
			_product_search_name_icon_display.classList = "fas fa-pencil-alt btn-guest-picker-icon"
			
			_form_product_search_hotel_product_city_id.value = ""
			_form_product_search_hotel_product_category_id.value = ""
			_form_product_search_hotel_product_product_id.value = ""
			_form_product_search_hotel_product_name.value = ""
			_form_product_search_hotel_product_arrive_date.value = ""
			_form_product_search_hotel_product_number_of_children.value = "0"
			_form_product_search_hotel_product_number_of_adults.value = "1"
			_form_product_search_hotel_product_number_of_rooms.value = "1"
			_form_product_search_hotel_product_depart_date.value = ""
			
			disableFormFields()
		}
		
		const enableHotelFormFields = function () {
			_buttonProductSearchName.disabled = false
			_buttonProductSearchCity.disabled = false
			_buttonProductSearchCheckIn.disabled = false
			_buttonProductSearchCheckOut.disabled = false
			_buttonProductSearchGuest.disabled = false
			$("div[data-hotel='true'").show()
		}
		
		const enableFlightFormFields = function () {
			_buttonProductSearchName.disabled = false
			_buttonProductSearchCity.disabled = false
			_buttonProductSearchCheckIn.disabled = false
			_buttonProductSearchCheckOut.disabled = false
			_buttonProductSearchGuest.disabled = false
			$("div[data-flight='true'").show()
		}
		
		const disableFormFields = function () {
			_buttonProductSearchName.disabled = true
			_buttonProductSearchCity.disabled = true
			_buttonProductSearchCheckIn.disabled = true
			_buttonProductSearchCheckOut.disabled = true
			_buttonProductSearchGuest.disabled = true
		}
		
		const initAutocomplete = function (category_id) {
			
			$(_formProductSearchCity)
				.on("search", function () {
					_formProductSearchCity.value = ""
					_formProductSearchCityId.value = ""
					updateProductCitySearch()
				})
				.on("click", function (e) {
					$(this).select()
				})
				.autocomplete({
					serviceUrl: "/api/v1.0/autocomplete/cities",
					minChars: 2,
					cache: false,
					dataType: "json",
					triggerSelectOnValidInput: false,
					paramName: "st",
					onSelect: function (suggestion) {
						if (!suggestion.data) {
							return
						}
						let city = suggestion.data
						
						_formProductSearchCityId.value = city.id
					},
				})
			
			$(_formProductSearchName)
				.on("search", function () {
					_formProductSearchName.value = ""
					_formProductSearchNameId.value = ""
					updateProductCitySearch()
				})
				.on("click", function (e) {
					$(this).select()
				})
				.autocomplete({
					serviceUrl: "/api/v1.0/autocomplete/products",
					minChars: 2,
					cache: false,
					dataType: "json",
					triggerSelectOnValidInput: false,
					params: { "category_id": category_id },
					paramName: "st",
					onSelect: function (suggestion) {
						if (!suggestion.data) {
							return
						}
						let product = suggestion.data
						_form_product_search_hotel_product_product_id.value = product.id
						_formProductSearchNameId.value = product.id
					},
				})
		}
		
		const categoryChanged = function () {
			resetForm()
		}
		
		const updateProductNameSearch = function () {
			
			if (_formProductSearchName) {
				let name = (_formProductSearchName.value !== '') ? _formProductSearchName.value : 'any'
				
				_product_search_name_display.innerText = name
				_form_product_search_hotel_product_name.value = name
				
				if (_buttonProductSearchName) {
					$(_buttonProductSearchName).popover("hide")
				}
			}
		}
		
		const updateProductGuestSearch = function () {
			
			if (
				roomNumber && adultNumber && childNumber
				&& _form_product_search_hotel_product_number_of_rooms && _form_product_search_hotel_product_number_of_adults && _form_product_search_hotel_product_number_of_children
				&& roomDisplay && adultDisplay && childDisplay
			) {
				let roomCount = (!isNaN(parseInt(roomNumber.value))) ? parseInt(roomNumber.value) : 1
				let adultCount = (!isNaN(parseInt(adultNumber.value))) ? parseInt(adultNumber.value) : 1
				let childCount = (!isNaN(parseInt(childNumber.value))) ? parseInt(childNumber.value) : 0
				
				roomDisplay.innerText = (roomCount > 1) ? roomCount + ' rooms, ' : roomCount + ' room, '
				adultDisplay.innerText = (adultCount > 1) ? adultCount + ' adults, ' : adultCount + ' adult, '
				childDisplay.innerText = (childCount > 1) ? childCount + ' children' : childCount + ' child'
				
				_form_product_search_hotel_product_number_of_rooms.value = (roomCount > 1) ? roomCount : 1
				_form_product_search_hotel_product_number_of_adults.value = (adultCount > 1) ? adultCount : 1
				_form_product_search_hotel_product_number_of_children.value = (childCount > 0) ? childCount : 0
				
				if (_buttonProductSearchGuest) {
					$(_buttonProductSearchGuest).popover("hide")
				}
			}
		}
		
		const updateProductCitySearch = function () {
			if (_formProductSearchCity) {
				_product_search_city_display.innerText = (_formProductSearchCity.value !== '') ? _formProductSearchCity.value : 'city name'
				_form_product_search_hotel_product_city_id.value = _formProductSearchCityId.value
				$(_form_product_search_hotel_product_city_id).trigger("change")
			}
		}
		
		const closeProductNameSearch = function () {
			if (_buttonProductSearchName) {
				$(_buttonProductSearchName).popover("hide")
			}
			
			window.removeEventListener("click", clickOutsideProductNameSearch)
		}
		
		const closeProductCitySearch = function () {
			if (_buttonProductSearchCity) {
				$(_buttonProductSearchCity).popover("hide")
			}
			window.removeEventListener("click", clickOutsideProductCitySearch)
		}
		
		const closeProductGuestSearch = function () {
			if (_buttonProductSearchGuest) {
				$(_buttonProductSearchGuest).popover("hide")
			}
			
			window.removeEventListener("click", clickOutsideProductGuestSearch)
		}
		
		const clickOutsideProductNameSearch = (e) => {
			let class_name = "name-search"
			let tar = $(e.target).parents("div.popover")
			
			if (!tar[0] && !e.target.className.includes(class_name)) {
				updateProductNameSearch()
				closeProductNameSearch()
			}
		}
		
		const clickOutsideProductGuestSearch = (e) => {
			let class_name = "btn-guest-picker"
			let tar = $(e.target).parents("div.popover")
			
			if ((!tar[0] && !e.target.className.includes(class_name))) {
				updateProductGuestSearch()
				closeProductGuestSearch()
			}
		}
		
		const clickOutsideProductCitySearch = (e) => {
			let class_name = "btn-city-picker"
			let tar = $(e.target).parents("div.popover")
			
			if (!tar[0] && !e.target.className.includes(class_name)) {
				updateProductCitySearch()
				closeProductCitySearch()
			}
		}
		
		const initProductNameSearch = function () {
			window.addEventListener("click", clickOutsideProductNameSearch)
		}
		
		const initProductGuestSearch = function () {
			window.addEventListener("click", clickOutsideProductGuestSearch)
		}
		
		const initProductCitySearch = function () {
			window.addEventListener("click", clickOutsideProductCitySearch)
		}
		
		const init = function (settings) {
			$(function () {
				
				if (_form_product_search) {
					categoryItem = document.querySelectorAll(".category-dropdown-item")
					categoryItem.forEach(el => el.addEventListener("click", event => {
						_formProductSearchIcon.classList = " " + el.dataset.categoryicon + " mr-3 "
						_product_search_name_icon_display.classList = " " + el.dataset.categoryicon + " btn-guest-picker-icon"
						_product_search_category_display.innerText = el.dataset.categoryname
						category_id = parseInt(el.dataset.categoryid)
						initAutocomplete(category_id)
						_form_product_search_hotel_product_category_id.value = category_id
						_form_product_search_hotel_product_category_id.dataset.categoryid = category_id
						_form_product_search_hotel_product_category_id.dataset.categoryname = el.dataset.categoryname
						_form_product_search_hotel_product_category_id.dataset.categoryicon = el.dataset.categoryicon
						_product_search_subtitle.innerText = el.dataset.categoryname
						$(_form_product_search_hotel_product_category_id).trigger("change")
						$(_buttonProductSearchCategory).trigger("change")
					}))
					
					if (_buttonProductSearchName) {
						popupNameTitle = $("#popoverNameForm .popover-head h5")
						popupNameContent = $("#popoverNameForm .popover-body form")
						
						$(_buttonProductSearchName).popover({
							placement: "bottom",
							title: () => popupNameTitle,
							html: true,
							container: "body",
							content: () => popupNameContent,
							
						})
					}
					
					if (_buttonProductSearchCity) {
						popupCityTitle = $("#popoverCityForm .popover-head h5")
						popupCityContent = $("#popoverCityForm .popover-body form")
						
						$(_buttonProductSearchCity).popover({
							placement: "bottom",
							title: () => popupCityTitle,
							html: true,
							container: "body",
							content: () => popupCityContent,
							
						})
					}
					
					if (_buttonProductSearchGuest) {
						popupGuestTitle = $("#popoverGuestForm .popover-head h5")
						popupGuestContent = $("#popoverGuestForm .popover-body form")
						
						$(_buttonProductSearchGuest).popover({
							placement: "bottom",
							title: () => popupGuestTitle,
							html: true,
							container: "body",
							content: () => popupGuestContent,
							
						})
					}
					
					if (_product_search_results) {
						//$(_product_search_results).hide()
						
					}
					
					resetForm()
				}
				
			})
		}
		
		init(settings)
		
		return {
			init: function (settings) {
				init(settings)
			},
			updateProductCitySearch: function () {
				updateProductCitySearch()
			},
			updateProductNameSearch: function () {
				updateProductNameSearch()
			},
			closeProductGuestSearch: function () {
				closeProductGuestSearch()
			},
		}
	}
	
	$(function () {
		let productSearch = ProductSearch()
	})

</script>
<!-- /ProductSearch -->
