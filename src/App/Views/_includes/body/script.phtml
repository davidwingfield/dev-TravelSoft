<!-- Package -->
<script type="text/javascript">

</script>
<!-- /Company -->

<!-- Variant -->
<script type="text/javascript">

</script>
<!-- ./Variant -->

<!-- Unit -->
<script type="text/javascript">

</script>
<!-- /Unit -->

<!-- RouteManager -->
<script type="text/javascript">
	function RouteManager (element, options) {
		console.log("RouteManager(element, options)", options)
		// ----
		
		if (!(options && element)) {
			//console.log("Missing options.")
			//console.log("|__ options", options)
			return
		}
		
		let userId = (document.getElementById("user_id")) ? (!isNaN(parseInt(document.getElementById("user_id").value))) ? parseInt(document.getElementById("user_id").value) : 4 : 4
		let baseId = "route_manager"
		let defaults = {
			urls: {},
			messages: {},
			error: {},
			tpl: {
				toggle: "<a><i class='fas fa-sliders-h'></i></a>",
				heading: "<div class='d-flex justify-content-between'><h5 class=''><span class=''>Tour Route</span></h5></div>",
				container: "<ul class='list-group route-manager-wrapper'></ul>",
			},
		}
		
		this.userId = userId
		this.element = element
		this.baseId = baseId
		this.isInit = false
		this.errorsEvent = $.Event("routemanager.errors")
		this.errorsEvent.errors = []
		this.isDisabled = false
		this.stops = []
		this.all = new Map()
		this.detail = {
			created_by: userId,
			date_created: formatDateMySQL(),
			date_modified: formatDateMySQL(),
			enabled: 1,
			id: null,
			location_id: null,
			modified_by: userId,
			name: null,
			note: null,
		}
		this.settings = $.extend(true, defaults, options)
		
		this.input = $(this.element)
		this.heading = null
		this.toggle = null
		this.container = null
		
		this.init = this.init.bind(this)
		//this.loadAll = this.loadAll.bind(this)
		
		this.init(options)
	}
	
	RouteManager.prototype.loadAllRoutes = function () {
		console.log("RouteManager.loadAllRoutes()", this.stops)
		// ----
		
		$.each(this.stops, function (i, location) {
			//console.log("|__ location", location)
			
		})
		
	}
	RouteManager.prototype.createElements = function () {
		console.log("RouteManager.createElements()")
		// ----
		this.isInit = true
		
		this.input.empty()
		
		this.heading = $(this.settings.tpl.heading)
		this.toggle = $(this.settings.tpl.toggle)
		this.container = $(this.settings.tpl.container)
		
		this.heading.append(this.toggle)
		this.input.append(this.heading, this.container)
	}
	RouteManager.prototype.init = function (options) {
		console.log("RouteManager.init(options)", options)
		// ----
		
		this.stops = (options && options.stops) ? options.stops : []
		
		this.createElements()
		this.loadAllRoutes()
		
		console.log("|__ RouteManager", RouteManager)
	}
	
	$.fn.routeManager = function (options) {
		"use strict"
		
		return new RouteManager(document.getElementById($(this).attr("id")), options)
	}
</script>
<!-- /RouteManager -->

<!-- Product -->
<script type="text/javascript">

</script>
<!-- /Product -->

<script type="text/javascript">
	const dateRegEx = /(((19|20)\d\d)\-(0[1-9]|1[0-2])\-((0|1)[0-9]|2[0-9]|3[0-1]))$/
	const loadDateError = function (input) {
		let $errorElement = $(input).parents("div.form-element").find("div.error")
		
		$errorElement.html("Invalid Date. Only YYYY-MM-DD format allowed.").show()
	}
	const unLoadDateError = function (input) {
		let $errorElement = $(input).parents("div.form-element").find("div.error")
		
		$errorElement.html("").hide()
	}
	const isDateValid = function (input) {
		let dateString = input.value
		
		if (dateRegEx.test(dateString) || dateString.length === 0) {
			unLoadDateError(input)
		} else {
			loadDateError(input)
		}
		
	}
	const isNumber = function (input, keyCode) {
		let separatorDate = "-"
		let isShift = false
		
		if (!isNaN(parseInt(keyCode))) {
			keyCode = parseInt(keyCode)
		}
		
		if (keyCode === 16) {
			isShift = true
		}
		
		if ((keyCode >= 48 && keyCode <= 57) || (keyCode >= 96 && keyCode <= 105) || (keyCode === 8) || (keyCode === 46)) {
			
			if (keyCode !== 16) {
				if ((input.value.length === 4 || input.value.length === 7) && keyCode !== 8) {
					input.value += separatorDate
				}
				
				return true
			}
			
		}
		
		return false
	}
</script>

